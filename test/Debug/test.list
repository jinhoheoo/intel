
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa0  08004aa0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08004b10  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004b10  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d41e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002079  00000000  00000000  0002d4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c1  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017540  00000000  00000000  00030bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f059  00000000  00000000  00048109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f6f8  00000000  00000000  00057162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c60  00000000  00000000  000e685c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ea4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a2c 	.word	0x08004a2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004a2c 	.word	0x08004a2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_GPIO_Init+0x7c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <MX_GPIO_Init+0x7c>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_GPIO_Init+0x7c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_GPIO_Init+0x7c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <MX_GPIO_Init+0x7c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_GPIO_Init+0x7c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <MX_GPIO_Init+0x80>)
 8000dac:	f000 ff2c 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db0:	2320      	movs	r3, #32
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_GPIO_Init+0x80>)
 8000dc8:	f000 fd9a 	bl	8001900 <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000de4:	1d39      	adds	r1, r7, #4
 8000de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dea:	2201      	movs	r2, #1
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <__io_putchar+0x20>)
 8000dee:	f002 fb84 	bl	80034fa <HAL_UART_Transmit>

  return ch;
 8000df2:	687b      	ldr	r3, [r7, #4]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000e0 	.word	0x200000e0

08000e00 <delay>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void delay (uint16_t time)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <delay+0x30>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000e12:	bf00      	nop
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <delay+0x30>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d3f9      	bcc.n	8000e14 <delay+0x14>
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000098 	.word	0x20000098
 8000e34:	00000000 	.word	0x00000000

08000e38 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7f1b      	ldrb	r3, [r3, #28]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 8083 	bne.w	8000f50 <HAL_TIM_IC_CaptureCallback+0x118>
    {
        if (Is_First_Captured==0) // if the first value is not captured
 8000e4a:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d11a      	bne.n	8000e88 <HAL_TIM_IC_CaptureCallback+0x50>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e52:	2100      	movs	r1, #0
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f001 ffb7 	bl	8002dc8 <HAL_TIM_ReadCapturedValue>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a41      	ldr	r2, [pc, #260]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e5e:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 020a 	bic.w	r2, r2, #10
 8000e74:	621a      	str	r2, [r3, #32]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0202 	orr.w	r2, r2, #2
 8000e84:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
        }
    }
}
 8000e86:	e063      	b.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x118>
        else if (Is_First_Captured==1)   // if the first is already captured
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d15f      	bne.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x118>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e90:	2100      	movs	r1, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f001 ff98 	bl	8002dc8 <HAL_TIM_ReadCapturedValue>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a33      	ldr	r2, [pc, #204]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e9c:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
            if (IC_Val2 > IC_Val1)
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d907      	bls.n	8000ec2 <HAL_TIM_IC_CaptureCallback+0x8a>
                Difference = IC_Val2-IC_Val1;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e00f      	b.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0xaa>
            else if (IC_Val1 > IC_Val2)
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d909      	bls.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0xaa>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000edc:	33ff      	adds	r3, #255	; 0xff
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ee0:	6013      	str	r3, [r2, #0]
            Distance = Difference * .034/2;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fb0c 	bl	8000504 <__aeabi_ui2d>
 8000eec:	a31a      	add	r3, pc, #104	; (adr r3, 8000f58 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	f7ff fb81 	bl	80005f8 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f06:	f7ff fca1 	bl	800084c <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fd83 	bl	8000a1c <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f1c:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // set it back to false
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a1a      	ldr	r2, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 020a 	bic.w	r2, r2, #10
 8000f32:	621a      	str	r2, [r3, #32]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a12      	ldr	r2, [r2, #32]
 8000f3e:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0202 	bic.w	r2, r2, #2
 8000f4e:	60da      	str	r2, [r3, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	b020c49c 	.word	0xb020c49c
 8000f5c:	3fa16872 	.word	0x3fa16872
 8000f60:	20000090 	.word	0x20000090
 8000f64:	20000084 	.word	0x20000084
 8000f68:	20000088 	.word	0x20000088
 8000f6c:	2000008c 	.word	0x2000008c
 8000f70:	20000091 	.word	0x20000091
 8000f74:	20000098 	.word	0x20000098

08000f78 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2120      	movs	r1, #32
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <HCSR04_Read+0x34>)
 8000f82:	f000 fe41 	bl	8001c08 <HAL_GPIO_WritePin>
    delay(10);  // wait for 10 us
 8000f86:	200a      	movs	r0, #10
 8000f88:	f7ff ff3a 	bl	8000e00 <delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <HCSR04_Read+0x34>)
 8000f92:	f000 fe39 	bl	8001c08 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HCSR04_Read+0x38>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HCSR04_Read+0x38>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0202 	orr.w	r2, r2, #2
 8000fa4:	60da      	str	r2, [r3, #12]
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	20000098 	.word	0x20000098

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f000 fafa 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f81c 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff feca 	bl	8000d58 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fc4:	f000 f998 	bl	80012f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fc8:	f000 fa56 	bl	8001478 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <main+0x38>)
 8000fd0:	f001 fb74 	bl	80026bc <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        HCSR04_Read();
 8000fd4:	f7ff ffd0 	bl	8000f78 <HCSR04_Read>
        printf("%d cm\r\n",Distance);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <main+0x3c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <main+0x40>)
 8000fe0:	f002 feb0 	bl	8003d44 <iprintf>
        HAL_Delay(200);
 8000fe4:	20c8      	movs	r0, #200	; 0xc8
 8000fe6:	f000 fb55 	bl	8001694 <HAL_Delay>
        HCSR04_Read();
 8000fea:	e7f3      	b.n	8000fd4 <main+0x20>
 8000fec:	20000098 	.word	0x20000098
 8000ff0:	20000091 	.word	0x20000091
 8000ff4:	08004a44 	.word	0x08004a44

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fef1 	bl	8003dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <SystemClock_Config+0xc8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <SystemClock_Config+0xc8>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <SystemClock_Config+0xc8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <SystemClock_Config+0xcc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <SystemClock_Config+0xcc>)
 8001042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <SystemClock_Config+0xcc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fddd 	bl	8001c3c <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 f81e 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2103      	movs	r1, #3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 f83f 	bl	800212c <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010b4:	f000 f808 	bl	80010c8 <Error_Handler>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3750      	adds	r7, #80	; 0x50
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_MspInit+0x4c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 fa70 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM3_IRQHandler+0x10>)
 800117e:	f001 fbb7 	bl	80028f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000098 	.word	0x20000098

0800118c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e00a      	b.n	80011b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119e:	f3af 8000 	nop.w
 80011a2:	4601      	mov	r1, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	b2ca      	uxtb	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbf0      	blt.n	800119e <_read+0x12>
  }

  return len;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e009      	b.n	80011ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fdfb 	bl	8000ddc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf1      	blt.n	80011d8 <_write+0x12>
  }
  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_close>:

int _close(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	605a      	str	r2, [r3, #4]
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_isatty>:

int _isatty(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f002 fdf8 	bl	8003e8c <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20020000 	.word	0x20020000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	20000094 	.word	0x20000094
 80012d0:	20000278 	.word	0x20000278

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <MX_TIM3_Init+0xdc>)
 8001326:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_TIM3_Init+0xd8>)
 800132a:	2263      	movs	r2, #99	; 0x63
 800132c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_TIM3_Init+0xd8>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001348:	4821      	ldr	r0, [pc, #132]	; (80013d0 <MX_TIM3_Init+0xd8>)
 800134a:	f001 f90f 	bl	800256c <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001354:	f7ff feb8 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4619      	mov	r1, r3
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001366:	f001 fc67 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001370:	f7ff feaa 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001376:	f001 f948 	bl	800260a <HAL_TIM_IC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001380:	f7ff fea2 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <MX_TIM3_Init+0xd8>)
 8001394:	f001 ffe2 	bl	800335c <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800139e:	f7ff fe93 	bl	80010c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM3_Init+0xd8>)
 80013ba:	f001 fba1 	bl	8002b00 <HAL_TIM_IC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80013c4:	f7ff fe80 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000098 	.word	0x20000098
 80013d4:	40000400 	.word	0x40000400

080013d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_TIM_Base_MspInit+0x94>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d133      	bne.n	8001462 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_TIM_Base_MspInit+0x98>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_TIM_Base_MspInit+0x98>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_TIM_Base_MspInit+0x98>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_TIM_Base_MspInit+0x98>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_TIM_Base_MspInit+0x98>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_TIM_Base_MspInit+0x98>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001442:	2302      	movs	r3, #2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_TIM_Base_MspInit+0x9c>)
 800144e:	f000 fa57 	bl	8001900 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	201d      	movs	r0, #29
 8001458:	f000 fa1b 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800145c:	201d      	movs	r0, #29
 800145e:	f000 fa34 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40000400 	.word	0x40000400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_USART2_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014b0:	f001 ffd6 	bl	8003460 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f7ff fe05 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000e0 	.word	0x200000e0
 80014c8:	40004400 	.word	0x40004400

080014cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_UART_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12b      	bne.n	8001546 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_UART_MspInit+0x88>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_UART_MspInit+0x88>)
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_UART_MspInit+0x88>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_UART_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_UART_MspInit+0x88>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_UART_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001526:	230c      	movs	r3, #12
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001536:	2307      	movs	r3, #7
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_UART_MspInit+0x8c>)
 8001542:	f000 f9dd 	bl	8001900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40004400 	.word	0x40004400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001586:	f7ff fea5 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f002 fc85 	bl	8003e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff fd11 	bl	8000fb4 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015a0:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 80015a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015a8:	20000274 	.word	0x20000274

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f94f 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fd76 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f967 	bl	80018e6 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f92f 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	20000124 	.word	0x20000124

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000124 	.word	0x20000124

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e159      	b.n	8001bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8148 	bne.w	8001bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	2b02      	cmp	r3, #2
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a2 	beq.w	8001bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a56      	ldr	r2, [pc, #344]	; (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa2:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_GPIO_Init+0x2ec>)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x2f0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x202>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2f4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x1fe>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_GPIO_Init+0x2f8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x1fa>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_GPIO_Init+0x2fc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x1f6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	; (8001c00 <HAL_GPIO_Init+0x300>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x1f2>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x2ec>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f aea2 	bls.w	800191c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e267      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d075      	beq.n	8001d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d00c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b82      	ldr	r3, [pc, #520]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x108>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d157      	bne.n	8001d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e242      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x74>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x98>
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cd4:	4b69      	ldr	r3, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a68      	ldr	r2, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fcc2 	bl	800167c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fcbe 	bl	800167c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e207      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xc0>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fcae 	bl	800167c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fcaa 	bl	800167c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1f3      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0xe8>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d52:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e1c7      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_OscConfig+0x244>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fc63 	bl	800167c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fc5f 	bl	800167c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e1a8      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4925      	ldr	r1, [pc, #148]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x244>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fc42 	bl	800167c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fc3e 	bl	800167c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e187      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d036      	beq.n	8001e94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x248>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff fc22 	bl	800167c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fc1e 	bl	800167c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e167      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x240>)
 8001e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x200>
 8001e5a:	e01b      	b.n	8001e94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x248>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fc0b 	bl	800167c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	e00e      	b.n	8001e88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fc07 	bl	800167c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d907      	bls.n	8001e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e150      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470000 	.word	0x42470000
 8001e84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ea      	bne.n	8001e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8097 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b81      	ldr	r3, [pc, #516]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b7d      	ldr	r3, [pc, #500]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a7c      	ldr	r2, [pc, #496]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a73      	ldr	r2, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fbc7 	bl	800167c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff fbc3 	bl	800167c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e10c      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x474>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2ea>
 8001f18:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x324>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x30c>
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a5b      	ldr	r2, [pc, #364]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0x324>
 8001f48:	4b58      	ldr	r3, [pc, #352]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 0304 	bic.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff fb88 	bl	800167c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff fb84 	bl	800167c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0cb      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	4b49      	ldr	r3, [pc, #292]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ee      	beq.n	8001f70 <HAL_RCC_OscConfig+0x334>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fb72 	bl	800167c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fb6e 	bl	800167c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0b5      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ee      	bne.n	8001f9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a38      	ldr	r2, [pc, #224]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a1 	beq.w	800211c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d05c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d141      	bne.n	8002072 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fb42 	bl	800167c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff fb3e 	bl	800167c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e087      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	491b      	ldr	r1, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x478>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fb17 	bl	800167c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff fb13 	bl	800167c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e05c      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x416>
 8002070:	e054      	b.n	800211c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_OscConfig+0x478>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fb00 	bl	800167c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff fafc 	bl	800167c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e045      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_OscConfig+0x470>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x444>
 800209e:	e03d      	b.n	800211c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e038      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_RCC_OscConfig+0x4ec>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d028      	beq.n	8002118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d121      	bne.n	8002118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11a      	bne.n	8002118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	3b01      	subs	r3, #1
 8002102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0cc      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b68      	ldr	r3, [pc, #416]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d90c      	bls.n	8002168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b8      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800218a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a52      	ldr	r2, [pc, #328]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	494d      	ldr	r1, [pc, #308]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d044      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d119      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e07f      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06f      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e067      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4934      	ldr	r1, [pc, #208]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7ff fa2e 	bl	800167c <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7ff fa2a 	bl	800167c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e04f      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d20c      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e032      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4916      	ldr	r1, [pc, #88]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	490e      	ldr	r1, [pc, #56]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b2:	f000 f821 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	490a      	ldr	r1, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f98e 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	08004a4c 	.word	0x08004a4c
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022fc:	b094      	sub	sp, #80	; 0x50
 80022fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
 8002304:	2300      	movs	r3, #0
 8002306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002310:	4b79      	ldr	r3, [pc, #484]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d00d      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x40>
 800231c:	2b08      	cmp	r3, #8
 800231e:	f200 80e1 	bhi.w	80024e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x34>
 8002326:	2b04      	cmp	r3, #4
 8002328:	d003      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x3a>
 800232a:	e0db      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_GetSysClockFreq+0x204>)
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002330:	e0db      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_GetSysClockFreq+0x208>)
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002336:	e0d8      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002338:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002340:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d063      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234e:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	2200      	movs	r2, #0
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
 8002358:	63fa      	str	r2, [r7, #60]	; 0x3c
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
 8002362:	2300      	movs	r3, #0
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
 8002366:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	0159      	lsls	r1, r3, #5
 8002378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237c:	0150      	lsls	r0, r2, #5
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4621      	mov	r1, r4
 8002384:	1a51      	subs	r1, r2, r1
 8002386:	6139      	str	r1, [r7, #16]
 8002388:	4629      	mov	r1, r5
 800238a:	eb63 0301 	sbc.w	r3, r3, r1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800239c:	4659      	mov	r1, fp
 800239e:	018b      	lsls	r3, r1, #6
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a6:	4651      	mov	r1, sl
 80023a8:	018a      	lsls	r2, r1, #6
 80023aa:	4651      	mov	r1, sl
 80023ac:	ebb2 0801 	subs.w	r8, r2, r1
 80023b0:	4659      	mov	r1, fp
 80023b2:	eb63 0901 	sbc.w	r9, r3, r1
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ca:	4690      	mov	r8, r2
 80023cc:	4699      	mov	r9, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	eb18 0303 	adds.w	r3, r8, r3
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	462b      	mov	r3, r5
 80023d8:	eb49 0303 	adc.w	r3, r9, r3
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023ea:	4629      	mov	r1, r5
 80023ec:	024b      	lsls	r3, r1, #9
 80023ee:	4621      	mov	r1, r4
 80023f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023f4:	4621      	mov	r1, r4
 80023f6:	024a      	lsls	r2, r1, #9
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fe:	2200      	movs	r2, #0
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
 8002402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002408:	f7fe fb28 	bl	8000a5c <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002414:	e058      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	2200      	movs	r2, #0
 800241e:	4618      	mov	r0, r3
 8002420:	4611      	mov	r1, r2
 8002422:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002430:	4642      	mov	r2, r8
 8002432:	464b      	mov	r3, r9
 8002434:	f04f 0000 	mov.w	r0, #0
 8002438:	f04f 0100 	mov.w	r1, #0
 800243c:	0159      	lsls	r1, r3, #5
 800243e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002442:	0150      	lsls	r0, r2, #5
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4641      	mov	r1, r8
 800244a:	ebb2 0a01 	subs.w	sl, r2, r1
 800244e:	4649      	mov	r1, r9
 8002450:	eb63 0b01 	sbc.w	fp, r3, r1
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002460:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002464:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002468:	ebb2 040a 	subs.w	r4, r2, sl
 800246c:	eb63 050b 	sbc.w	r5, r3, fp
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	00eb      	lsls	r3, r5, #3
 800247a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800247e:	00e2      	lsls	r2, r4, #3
 8002480:	4614      	mov	r4, r2
 8002482:	461d      	mov	r5, r3
 8002484:	4643      	mov	r3, r8
 8002486:	18e3      	adds	r3, r4, r3
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	464b      	mov	r3, r9
 800248c:	eb45 0303 	adc.w	r3, r5, r3
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800249e:	4629      	mov	r1, r5
 80024a0:	028b      	lsls	r3, r1, #10
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a8:	4621      	mov	r1, r4
 80024aa:	028a      	lsls	r2, r1, #10
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	2200      	movs	r2, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	61fa      	str	r2, [r7, #28]
 80024b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024bc:	f7fe face 	bl	8000a5c <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4613      	mov	r3, r2
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	3301      	adds	r3, #1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetSysClockFreq+0x204>)
 80024e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3750      	adds	r7, #80	; 0x50
 80024f0:	46bd      	mov	sp, r7
 80024f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a9b      	lsrs	r3, r3, #10
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	08004a5c 	.word	0x08004a5c

08002544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002548:	f7ff ffdc 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0b5b      	lsrs	r3, r3, #13
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	08004a5c 	.word	0x08004a5c

0800256c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe ff20 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fc78 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e041      	b.n	80026a0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f839 	bl	80026a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f000 fc29 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d104      	bne.n	80026da <HAL_TIM_IC_Start_IT+0x1e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	e013      	b.n	8002702 <HAL_TIM_IC_Start_IT+0x46>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d104      	bne.n	80026ea <HAL_TIM_IC_Start_IT+0x2e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	e00b      	b.n	8002702 <HAL_TIM_IC_Start_IT+0x46>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_IC_Start_IT+0x3e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e003      	b.n	8002702 <HAL_TIM_IC_Start_IT+0x46>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <HAL_TIM_IC_Start_IT+0x58>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e013      	b.n	800273c <HAL_TIM_IC_Start_IT+0x80>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d104      	bne.n	8002724 <HAL_TIM_IC_Start_IT+0x68>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e00b      	b.n	800273c <HAL_TIM_IC_Start_IT+0x80>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d104      	bne.n	8002734 <HAL_TIM_IC_Start_IT+0x78>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e003      	b.n	800273c <HAL_TIM_IC_Start_IT+0x80>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273a:	b2db      	uxtb	r3, r3
 800273c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800273e:	7bbb      	ldrb	r3, [r7, #14]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002744:	7b7b      	ldrb	r3, [r7, #13]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0c2      	b.n	80028d4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <HAL_TIM_IC_Start_IT+0xa2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800275c:	e013      	b.n	8002786 <HAL_TIM_IC_Start_IT+0xca>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d104      	bne.n	800276e <HAL_TIM_IC_Start_IT+0xb2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	e00b      	b.n	8002786 <HAL_TIM_IC_Start_IT+0xca>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d104      	bne.n	800277e <HAL_TIM_IC_Start_IT+0xc2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800277c:	e003      	b.n	8002786 <HAL_TIM_IC_Start_IT+0xca>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d104      	bne.n	8002796 <HAL_TIM_IC_Start_IT+0xda>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	e013      	b.n	80027be <HAL_TIM_IC_Start_IT+0x102>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_IC_Start_IT+0xea>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a4:	e00b      	b.n	80027be <HAL_TIM_IC_Start_IT+0x102>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d104      	bne.n	80027b6 <HAL_TIM_IC_Start_IT+0xfa>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b4:	e003      	b.n	80027be <HAL_TIM_IC_Start_IT+0x102>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d841      	bhi.n	8002848 <HAL_TIM_IC_Start_IT+0x18c>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <HAL_TIM_IC_Start_IT+0x110>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002849 	.word	0x08002849
 80027d4:	08002849 	.word	0x08002849
 80027d8:	08002849 	.word	0x08002849
 80027dc:	08002813 	.word	0x08002813
 80027e0:	08002849 	.word	0x08002849
 80027e4:	08002849 	.word	0x08002849
 80027e8:	08002849 	.word	0x08002849
 80027ec:	08002825 	.word	0x08002825
 80027f0:	08002849 	.word	0x08002849
 80027f4:	08002849 	.word	0x08002849
 80027f8:	08002849 	.word	0x08002849
 80027fc:	08002837 	.word	0x08002837
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0202 	orr.w	r2, r2, #2
 800280e:	60da      	str	r2, [r3, #12]
      break;
 8002810:	e01d      	b.n	800284e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0204 	orr.w	r2, r2, #4
 8002820:	60da      	str	r2, [r3, #12]
      break;
 8002822:	e014      	b.n	800284e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0208 	orr.w	r2, r2, #8
 8002832:	60da      	str	r2, [r3, #12]
      break;
 8002834:	e00b      	b.n	800284e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0210 	orr.w	r2, r2, #16
 8002844:	60da      	str	r2, [r3, #12]
      break;
 8002846:	e002      	b.n	800284e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	bf00      	nop
  }

  if (status == HAL_OK)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d13e      	bne.n	80028d2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2201      	movs	r2, #1
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fd57 	bl	8003310 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_TIM_IC_Start_IT+0x220>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d018      	beq.n	800289e <HAL_TIM_IC_Start_IT+0x1e2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d013      	beq.n	800289e <HAL_TIM_IC_Start_IT+0x1e2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_TIM_IC_Start_IT+0x224>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_TIM_IC_Start_IT+0x1e2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_TIM_IC_Start_IT+0x228>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_TIM_IC_Start_IT+0x1e2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_TIM_IC_Start_IT+0x1e2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_TIM_IC_Start_IT+0x230>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d111      	bne.n	80028c2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d010      	beq.n	80028d2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	e007      	b.n	80028d2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800
 80028e8:	40000c00 	.word	0x40000c00
 80028ec:	40014000 	.word	0x40014000

080028f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d122      	bne.n	800294c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d11b      	bne.n	800294c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0202 	mvn.w	r2, #2
 800291c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fa80 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 8002938:	e005      	b.n	8002946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa92 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fa99 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d122      	bne.n	80029a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b04      	cmp	r3, #4
 8002966:	d11b      	bne.n	80029a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0204 	mvn.w	r2, #4
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fa56 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fa68 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fa6f 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d122      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d11b      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0208 	mvn.w	r2, #8
 80029c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2204      	movs	r2, #4
 80029ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fa2c 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 80029e0:	e005      	b.n	80029ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fa3e 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fa45 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0210 	mvn.w	r2, #16
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fa02 	bl	8000e38 <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa14 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa1b 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10e      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0201 	mvn.w	r2, #1
 8002a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9ee 	bl	8002e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d107      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fcd6 	bl	800344c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9e0 	bl	8002e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0220 	mvn.w	r2, #32
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fca0 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e088      	b.n	8002c30 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6819      	ldr	r1, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f000 fa30 	bl	8002fa0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 020c 	bic.w	r2, r2, #12
 8002b4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]
 8002b62:	e060      	b.n	8002c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d11c      	bne.n	8002ba4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f000 faa8 	bl	80030ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6999      	ldr	r1, [r3, #24]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	619a      	str	r2, [r3, #24]
 8002ba2:	e040      	b.n	8002c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11b      	bne.n	8002be2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f000 faf5 	bl	80031a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 020c 	bic.w	r2, r2, #12
 8002bcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69d9      	ldr	r1, [r3, #28]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	61da      	str	r2, [r3, #28]
 8002be0:	e021      	b.n	8002c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d11c      	bne.n	8002c22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f000 fb12 	bl	8003220 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69d9      	ldr	r1, [r3, #28]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	021a      	lsls	r2, r3, #8
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	61da      	str	r2, [r3, #28]
 8002c20:	e001      	b.n	8002c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIM_ConfigClockSource+0x1c>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0b4      	b.n	8002dbe <HAL_TIM_ConfigClockSource+0x186>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8c:	d03e      	beq.n	8002d0c <HAL_TIM_ConfigClockSource+0xd4>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	f200 8087 	bhi.w	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	f000 8086 	beq.w	8002daa <HAL_TIM_ConfigClockSource+0x172>
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	d87f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d01a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xa6>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d87b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d050      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x11a>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d877      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d03c      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xfa>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d873      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d058      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x13a>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d86f      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b30      	cmp	r3, #48	; 0x30
 8002cc6:	d064      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d86b      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d060      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d867      	bhi.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d05a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	e062      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f000 faef 	bl	80032d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
      break;
 8002d0a:	e04f      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f000 fad8 	bl	80032d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2e:	609a      	str	r2, [r3, #8]
      break;
 8002d30:	e03c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 f996 	bl	8003070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2150      	movs	r1, #80	; 0x50
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 faa5 	bl	800329a <TIM_ITRx_SetConfig>
      break;
 8002d50:	e02c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 f9f2 	bl	8003148 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2160      	movs	r1, #96	; 0x60
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fa95 	bl	800329a <TIM_ITRx_SetConfig>
      break;
 8002d70:	e01c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f976 	bl	8003070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fa85 	bl	800329a <TIM_ITRx_SetConfig>
      break;
 8002d90:	e00c      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 fa7c 	bl	800329a <TIM_ITRx_SetConfig>
      break;
 8002da2:	e003      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e000      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d831      	bhi.n	8002e40 <HAL_TIM_ReadCapturedValue+0x78>
 8002ddc:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002e41 	.word	0x08002e41
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e41 	.word	0x08002e41
 8002dfc:	08002e41 	.word	0x08002e41
 8002e00:	08002e41 	.word	0x08002e41
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e41 	.word	0x08002e41
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e41 	.word	0x08002e41
 8002e14:	08002e37 	.word	0x08002e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	60fb      	str	r3, [r7, #12]

      break;
 8002e20:	e00f      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	60fb      	str	r3, [r7, #12]

      break;
 8002e2a:	e00a      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	60fb      	str	r3, [r7, #12]

      break;
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	60fb      	str	r3, [r7, #12]

      break;
 8002e3e:	e000      	b.n	8002e42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e40:	bf00      	nop
  }

  return tmpreg;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <TIM_Base_SetConfig+0xe8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a30      	ldr	r2, [pc, #192]	; (8002f8c <TIM_Base_SetConfig+0xec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <TIM_Base_SetConfig+0xe8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <TIM_Base_SetConfig+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <TIM_Base_SetConfig+0xf4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <TIM_Base_SetConfig+0xf8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <TIM_Base_SetConfig+0xfc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d103      	bne.n	8002f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	615a      	str	r2, [r3, #20]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800

08002fa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <TIM_TI1_SetConfig+0xbc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <TIM_TI1_SetConfig+0x56>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d00f      	beq.n	8002ff6 <TIM_TI1_SetConfig+0x56>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a21      	ldr	r2, [pc, #132]	; (8003060 <TIM_TI1_SetConfig+0xc0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_TI1_SetConfig+0x56>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <TIM_TI1_SetConfig+0xc4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <TIM_TI1_SetConfig+0x56>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <TIM_TI1_SetConfig+0xc8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_TI1_SetConfig+0x56>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <TIM_TI1_SetConfig+0xcc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <TIM_TI1_SetConfig+0x5a>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <TIM_TI1_SetConfig+0x5c>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e003      	b.n	800301a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	b2db      	uxtb	r3, r3
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f023 030a 	bic.w	r3, r3, #10
 8003034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f003 030a 	and.w	r3, r3, #10
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40014000 	.word	0x40014000

08003070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 030a 	bic.w	r3, r3, #10
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b087      	sub	sp, #28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 0210 	bic.w	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800310c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	031b      	lsls	r3, r3, #12
 8003112:	b29b      	uxth	r3, r3
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003120:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 0210 	bic.w	r2, r3, #16
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	031b      	lsls	r3, r3, #12
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f023 0303 	bic.w	r3, r3, #3
 80031d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80031f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800325e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	031b      	lsls	r3, r3, #12
 8003264:	b29b      	uxth	r3, r3
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003272:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f043 0307 	orr.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	021a      	lsls	r2, r3, #8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2201      	movs	r2, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e050      	b.n	8003416 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d018      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d013      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a18      	ldr	r2, [pc, #96]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00e      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a16      	ldr	r2, [pc, #88]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a13      	ldr	r2, [pc, #76]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10c      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40000c00 	.word	0x40000c00
 8003434:	40014000 	.word	0x40014000

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e03f      	b.n	80034f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe f820 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	; 0x24
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f929 	bl	80036fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b08a      	sub	sp, #40	; 0x28
 80034fe:	af02      	add	r7, sp, #8
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d17c      	bne.n	8003614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_UART_Transmit+0x2c>
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e075      	b.n	8003616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_UART_Transmit+0x3e>
 8003534:	2302      	movs	r3, #2
 8003536:	e06e      	b.n	8003616 <HAL_UART_Transmit+0x11c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2221      	movs	r2, #33	; 0x21
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354e:	f7fe f895 	bl	800167c <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	d108      	bne.n	800357c <HAL_UART_Transmit+0x82>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e003      	b.n	8003584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800358c:	e02a      	b.n	80035e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f840 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e036      	b.n	8003616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	3302      	adds	r3, #2
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e007      	b.n	80035d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1cf      	bne.n	800358e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f810 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e006      	b.n	8003616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b090      	sub	sp, #64	; 0x40
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	e050      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d04c      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x30>
 800363e:	f7fe f81d 	bl	800167c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364a:	429a      	cmp	r2, r3
 800364c:	d241      	bcs.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800366e:	637a      	str	r2, [r7, #52]	; 0x34
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e5      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3314      	adds	r3, #20
 80036a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a2:	623a      	str	r2, [r7, #32]
 80036a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	69f9      	ldr	r1, [r7, #28]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e00f      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d09f      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3740      	adds	r7, #64	; 0x40
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b0c0      	sub	sp, #256	; 0x100
 8003702:	af00      	add	r7, sp, #0
 8003704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	ea40 0301 	orr.w	r3, r0, r1
 8003724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	431a      	orrs	r2, r3
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003754:	f021 010c 	bic.w	r1, r1, #12
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003762:	430b      	orrs	r3, r1
 8003764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	6999      	ldr	r1, [r3, #24]
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	ea40 0301 	orr.w	r3, r0, r1
 8003782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <UART_SetConfig+0x2cc>)
 800378c:	429a      	cmp	r2, r3
 800378e:	d005      	beq.n	800379c <UART_SetConfig+0xa0>
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b8d      	ldr	r3, [pc, #564]	; (80039cc <UART_SetConfig+0x2d0>)
 8003798:	429a      	cmp	r2, r3
 800379a:	d104      	bne.n	80037a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fed2 	bl	8002544 <HAL_RCC_GetPCLK2Freq>
 80037a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037a4:	e003      	b.n	80037ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037a6:	f7fe feb9 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80037aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b8:	f040 810c 	bne.w	80039d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ce:	4622      	mov	r2, r4
 80037d0:	462b      	mov	r3, r5
 80037d2:	1891      	adds	r1, r2, r2
 80037d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037d6:	415b      	adcs	r3, r3
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037de:	4621      	mov	r1, r4
 80037e0:	eb12 0801 	adds.w	r8, r2, r1
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb43 0901 	adc.w	r9, r3, r1
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fe:	4690      	mov	r8, r2
 8003800:	4699      	mov	r9, r3
 8003802:	4623      	mov	r3, r4
 8003804:	eb18 0303 	adds.w	r3, r8, r3
 8003808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800380c:	462b      	mov	r3, r5
 800380e:	eb49 0303 	adc.w	r3, r9, r3
 8003812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800382a:	460b      	mov	r3, r1
 800382c:	18db      	adds	r3, r3, r3
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
 8003830:	4613      	mov	r3, r2
 8003832:	eb42 0303 	adc.w	r3, r2, r3
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
 8003838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800383c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003840:	f7fd f90c 	bl	8000a5c <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <UART_SetConfig+0x2d4>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011c      	lsls	r4, r3, #4
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800385c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	64b9      	str	r1, [r7, #72]	; 0x48
 800386c:	415b      	adcs	r3, r3
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003874:	4641      	mov	r1, r8
 8003876:	eb12 0a01 	adds.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb43 0b01 	adc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800388c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003894:	4692      	mov	sl, r2
 8003896:	469b      	mov	fp, r3
 8003898:	4643      	mov	r3, r8
 800389a:	eb1a 0303 	adds.w	r3, sl, r3
 800389e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a2:	464b      	mov	r3, r9
 80038a4:	eb4b 0303 	adc.w	r3, fp, r3
 80038a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038c0:	460b      	mov	r3, r1
 80038c2:	18db      	adds	r3, r3, r3
 80038c4:	643b      	str	r3, [r7, #64]	; 0x40
 80038c6:	4613      	mov	r3, r2
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
 80038ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038d6:	f7fd f8c1 	bl	8000a5c <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <UART_SetConfig+0x2d4>)
 80038e2:	fba3 2301 	umull	r2, r3, r3, r1
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2264      	movs	r2, #100	; 0x64
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	1acb      	subs	r3, r1, r3
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <UART_SetConfig+0x2d4>)
 80038f8:	fba3 2302 	umull	r2, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003904:	441c      	add	r4, r3
 8003906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003920:	415b      	adcs	r3, r3
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6339      	str	r1, [r7, #48]	; 0x30
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800395c:	464b      	mov	r3, r9
 800395e:	460a      	mov	r2, r1
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800397c:	460b      	mov	r3, r1
 800397e:	18db      	adds	r3, r3, r3
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
 8003982:	4613      	mov	r3, r2
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800398e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003992:	f7fd f863 	bl	8000a5c <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <UART_SetConfig+0x2d4>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <UART_SetConfig+0x2d4>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4422      	add	r2, r4
 80039c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039c4:	e106      	b.n	8003bd4 <UART_SetConfig+0x4d8>
 80039c6:	bf00      	nop
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40011400 	.word	0x40011400
 80039d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039e6:	4642      	mov	r2, r8
 80039e8:	464b      	mov	r3, r9
 80039ea:	1891      	adds	r1, r2, r2
 80039ec:	6239      	str	r1, [r7, #32]
 80039ee:	415b      	adcs	r3, r3
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039f6:	4641      	mov	r1, r8
 80039f8:	1854      	adds	r4, r2, r1
 80039fa:	4649      	mov	r1, r9
 80039fc:	eb43 0501 	adc.w	r5, r3, r1
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	00eb      	lsls	r3, r5, #3
 8003a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0e:	00e2      	lsls	r2, r4, #3
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	4643      	mov	r3, r8
 8003a16:	18e3      	adds	r3, r4, r3
 8003a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	eb45 0303 	adc.w	r3, r5, r3
 8003a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a42:	4629      	mov	r1, r5
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	008a      	lsls	r2, r1, #2
 8003a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a54:	f7fd f802 	bl	8000a5c <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011c      	lsls	r4, r3, #4
 8003a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	1891      	adds	r1, r2, r2
 8003a7e:	61b9      	str	r1, [r7, #24]
 8003a80:	415b      	adcs	r3, r3
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a88:	4641      	mov	r1, r8
 8003a8a:	1851      	adds	r1, r2, r1
 8003a8c:	6139      	str	r1, [r7, #16]
 8003a8e:	4649      	mov	r1, r9
 8003a90:	414b      	adcs	r3, r1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	00cb      	lsls	r3, r1, #3
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aaa:	4651      	mov	r1, sl
 8003aac:	00ca      	lsls	r2, r1, #3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003abc:	464b      	mov	r3, r9
 8003abe:	460a      	mov	r2, r1
 8003ac0:	eb42 0303 	adc.w	r3, r2, r3
 8003ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	008b      	lsls	r3, r1, #2
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aea:	4641      	mov	r1, r8
 8003aec:	008a      	lsls	r2, r1, #2
 8003aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003af2:	f7fc ffb3 	bl	8000a5c <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003afe:	fba3 2301 	umull	r2, r3, r3, r1
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2264      	movs	r2, #100	; 0x64
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	1acb      	subs	r3, r1, r3
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	3332      	adds	r3, #50	; 0x32
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1c:	441c      	add	r4, r3
 8003b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b22:	2200      	movs	r2, #0
 8003b24:	673b      	str	r3, [r7, #112]	; 0x70
 8003b26:	677a      	str	r2, [r7, #116]	; 0x74
 8003b28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	415b      	adcs	r3, r3
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	1851      	adds	r1, r2, r1
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	4649      	mov	r1, r9
 8003b44:	414b      	adcs	r3, r1
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b54:	4659      	mov	r1, fp
 8003b56:	00cb      	lsls	r3, r1, #3
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5e:	4651      	mov	r1, sl
 8003b60:	00ca      	lsls	r2, r1, #3
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b6e:	464b      	mov	r3, r9
 8003b70:	460a      	mov	r2, r1
 8003b72:	eb42 0303 	adc.w	r3, r2, r3
 8003b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	663b      	str	r3, [r7, #96]	; 0x60
 8003b82:	667a      	str	r2, [r7, #100]	; 0x64
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b90:	4649      	mov	r1, r9
 8003b92:	008b      	lsls	r3, r1, #2
 8003b94:	4641      	mov	r1, r8
 8003b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9a:	4641      	mov	r1, r8
 8003b9c:	008a      	lsls	r2, r1, #2
 8003b9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ba2:	f7fc ff5b 	bl	8000a5c <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	2164      	movs	r1, #100	; 0x64
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	3332      	adds	r3, #50	; 0x32
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4422      	add	r2, r4
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be0:	51eb851f 	.word	0x51eb851f

08003be4 <std>:
 8003be4:	2300      	movs	r3, #0
 8003be6:	b510      	push	{r4, lr}
 8003be8:	4604      	mov	r4, r0
 8003bea:	e9c0 3300 	strd	r3, r3, [r0]
 8003bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bf2:	6083      	str	r3, [r0, #8]
 8003bf4:	8181      	strh	r1, [r0, #12]
 8003bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8003bf8:	81c2      	strh	r2, [r0, #14]
 8003bfa:	6183      	str	r3, [r0, #24]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	2208      	movs	r2, #8
 8003c00:	305c      	adds	r0, #92	; 0x5c
 8003c02:	f000 f8f4 	bl	8003dee <memset>
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <std+0x38>)
 8003c08:	6263      	str	r3, [r4, #36]	; 0x24
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <std+0x3c>)
 8003c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <std+0x40>)
 8003c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <std+0x44>)
 8003c14:	6224      	str	r4, [r4, #32]
 8003c16:	6323      	str	r3, [r4, #48]	; 0x30
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08003d69 	.word	0x08003d69
 8003c20:	08003d8b 	.word	0x08003d8b
 8003c24:	08003dc3 	.word	0x08003dc3
 8003c28:	08003de7 	.word	0x08003de7

08003c2c <stdio_exit_handler>:
 8003c2c:	4a02      	ldr	r2, [pc, #8]	; (8003c38 <stdio_exit_handler+0xc>)
 8003c2e:	4903      	ldr	r1, [pc, #12]	; (8003c3c <stdio_exit_handler+0x10>)
 8003c30:	4803      	ldr	r0, [pc, #12]	; (8003c40 <stdio_exit_handler+0x14>)
 8003c32:	f000 b869 	b.w	8003d08 <_fwalk_sglue>
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c
 8003c3c:	08004789 	.word	0x08004789
 8003c40:	20000018 	.word	0x20000018

08003c44 <cleanup_stdio>:
 8003c44:	6841      	ldr	r1, [r0, #4]
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <cleanup_stdio+0x34>)
 8003c48:	4299      	cmp	r1, r3
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	d001      	beq.n	8003c54 <cleanup_stdio+0x10>
 8003c50:	f000 fd9a 	bl	8004788 <_fflush_r>
 8003c54:	68a1      	ldr	r1, [r4, #8]
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <cleanup_stdio+0x38>)
 8003c58:	4299      	cmp	r1, r3
 8003c5a:	d002      	beq.n	8003c62 <cleanup_stdio+0x1e>
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 fd93 	bl	8004788 <_fflush_r>
 8003c62:	68e1      	ldr	r1, [r4, #12]
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <cleanup_stdio+0x3c>)
 8003c66:	4299      	cmp	r1, r3
 8003c68:	d004      	beq.n	8003c74 <cleanup_stdio+0x30>
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c70:	f000 bd8a 	b.w	8004788 <_fflush_r>
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	20000128 	.word	0x20000128
 8003c7c:	20000190 	.word	0x20000190
 8003c80:	200001f8 	.word	0x200001f8

08003c84 <global_stdio_init.part.0>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <global_stdio_init.part.0+0x30>)
 8003c88:	4c0b      	ldr	r4, [pc, #44]	; (8003cb8 <global_stdio_init.part.0+0x34>)
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <global_stdio_init.part.0+0x38>)
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	4620      	mov	r0, r4
 8003c90:	2200      	movs	r2, #0
 8003c92:	2104      	movs	r1, #4
 8003c94:	f7ff ffa6 	bl	8003be4 <std>
 8003c98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2109      	movs	r1, #9
 8003ca0:	f7ff ffa0 	bl	8003be4 <std>
 8003ca4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ca8:	2202      	movs	r2, #2
 8003caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cae:	2112      	movs	r1, #18
 8003cb0:	f7ff bf98 	b.w	8003be4 <std>
 8003cb4:	20000260 	.word	0x20000260
 8003cb8:	20000128 	.word	0x20000128
 8003cbc:	08003c2d 	.word	0x08003c2d

08003cc0 <__sfp_lock_acquire>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__sfp_lock_acquire+0x8>)
 8003cc2:	f000 b90d 	b.w	8003ee0 <__retarget_lock_acquire_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	20000269 	.word	0x20000269

08003ccc <__sfp_lock_release>:
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <__sfp_lock_release+0x8>)
 8003cce:	f000 b908 	b.w	8003ee2 <__retarget_lock_release_recursive>
 8003cd2:	bf00      	nop
 8003cd4:	20000269 	.word	0x20000269

08003cd8 <__sinit>:
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	4604      	mov	r4, r0
 8003cdc:	f7ff fff0 	bl	8003cc0 <__sfp_lock_acquire>
 8003ce0:	6a23      	ldr	r3, [r4, #32]
 8003ce2:	b11b      	cbz	r3, 8003cec <__sinit+0x14>
 8003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce8:	f7ff bff0 	b.w	8003ccc <__sfp_lock_release>
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <__sinit+0x28>)
 8003cee:	6223      	str	r3, [r4, #32]
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <__sinit+0x2c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f5      	bne.n	8003ce4 <__sinit+0xc>
 8003cf8:	f7ff ffc4 	bl	8003c84 <global_stdio_init.part.0>
 8003cfc:	e7f2      	b.n	8003ce4 <__sinit+0xc>
 8003cfe:	bf00      	nop
 8003d00:	08003c45 	.word	0x08003c45
 8003d04:	20000260 	.word	0x20000260

08003d08 <_fwalk_sglue>:
 8003d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	4688      	mov	r8, r1
 8003d10:	4614      	mov	r4, r2
 8003d12:	2600      	movs	r6, #0
 8003d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d18:	f1b9 0901 	subs.w	r9, r9, #1
 8003d1c:	d505      	bpl.n	8003d2a <_fwalk_sglue+0x22>
 8003d1e:	6824      	ldr	r4, [r4, #0]
 8003d20:	2c00      	cmp	r4, #0
 8003d22:	d1f7      	bne.n	8003d14 <_fwalk_sglue+0xc>
 8003d24:	4630      	mov	r0, r6
 8003d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2a:	89ab      	ldrh	r3, [r5, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d907      	bls.n	8003d40 <_fwalk_sglue+0x38>
 8003d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d34:	3301      	adds	r3, #1
 8003d36:	d003      	beq.n	8003d40 <_fwalk_sglue+0x38>
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c0      	blx	r8
 8003d3e:	4306      	orrs	r6, r0
 8003d40:	3568      	adds	r5, #104	; 0x68
 8003d42:	e7e9      	b.n	8003d18 <_fwalk_sglue+0x10>

08003d44 <iprintf>:
 8003d44:	b40f      	push	{r0, r1, r2, r3}
 8003d46:	b507      	push	{r0, r1, r2, lr}
 8003d48:	4906      	ldr	r1, [pc, #24]	; (8003d64 <iprintf+0x20>)
 8003d4a:	ab04      	add	r3, sp, #16
 8003d4c:	6808      	ldr	r0, [r1, #0]
 8003d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d52:	6881      	ldr	r1, [r0, #8]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	f000 f9e7 	bl	8004128 <_vfiprintf_r>
 8003d5a:	b003      	add	sp, #12
 8003d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d60:	b004      	add	sp, #16
 8003d62:	4770      	bx	lr
 8003d64:	20000064 	.word	0x20000064

08003d68 <__sread>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d70:	f000 f868 	bl	8003e44 <_read_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	bfab      	itete	ge
 8003d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d7c:	181b      	addge	r3, r3, r0
 8003d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d82:	bfac      	ite	ge
 8003d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d86:	81a3      	strhlt	r3, [r4, #12]
 8003d88:	bd10      	pop	{r4, pc}

08003d8a <__swrite>:
 8003d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8e:	461f      	mov	r7, r3
 8003d90:	898b      	ldrh	r3, [r1, #12]
 8003d92:	05db      	lsls	r3, r3, #23
 8003d94:	4605      	mov	r5, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	4616      	mov	r6, r2
 8003d9a:	d505      	bpl.n	8003da8 <__swrite+0x1e>
 8003d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da0:	2302      	movs	r3, #2
 8003da2:	2200      	movs	r2, #0
 8003da4:	f000 f83c 	bl	8003e20 <_lseek_r>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db2:	81a3      	strh	r3, [r4, #12]
 8003db4:	4632      	mov	r2, r6
 8003db6:	463b      	mov	r3, r7
 8003db8:	4628      	mov	r0, r5
 8003dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbe:	f000 b853 	b.w	8003e68 <_write_r>

08003dc2 <__sseek>:
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dca:	f000 f829 	bl	8003e20 <_lseek_r>
 8003dce:	1c43      	adds	r3, r0, #1
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	bf15      	itete	ne
 8003dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dde:	81a3      	strheq	r3, [r4, #12]
 8003de0:	bf18      	it	ne
 8003de2:	81a3      	strhne	r3, [r4, #12]
 8003de4:	bd10      	pop	{r4, pc}

08003de6 <__sclose>:
 8003de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dea:	f000 b809 	b.w	8003e00 <_close_r>

08003dee <memset>:
 8003dee:	4402      	add	r2, r0
 8003df0:	4603      	mov	r3, r0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d100      	bne.n	8003df8 <memset+0xa>
 8003df6:	4770      	bx	lr
 8003df8:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfc:	e7f9      	b.n	8003df2 <memset+0x4>
	...

08003e00 <_close_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4d06      	ldr	r5, [pc, #24]	; (8003e1c <_close_r+0x1c>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	f7fd f9f7 	bl	80011fe <_close>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_close_r+0x1a>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_close_r+0x1a>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000264 	.word	0x20000264

08003e20 <_lseek_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4d07      	ldr	r5, [pc, #28]	; (8003e40 <_lseek_r+0x20>)
 8003e24:	4604      	mov	r4, r0
 8003e26:	4608      	mov	r0, r1
 8003e28:	4611      	mov	r1, r2
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	602a      	str	r2, [r5, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7fd fa0c 	bl	800124c <_lseek>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_lseek_r+0x1e>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_lseek_r+0x1e>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20000264 	.word	0x20000264

08003e44 <_read_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4d07      	ldr	r5, [pc, #28]	; (8003e64 <_read_r+0x20>)
 8003e48:	4604      	mov	r4, r0
 8003e4a:	4608      	mov	r0, r1
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	602a      	str	r2, [r5, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f7fd f99a 	bl	800118c <_read>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_read_r+0x1e>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_read_r+0x1e>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	20000264 	.word	0x20000264

08003e68 <_write_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4d07      	ldr	r5, [pc, #28]	; (8003e88 <_write_r+0x20>)
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	4608      	mov	r0, r1
 8003e70:	4611      	mov	r1, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	602a      	str	r2, [r5, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f7fd f9a5 	bl	80011c6 <_write>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_write_r+0x1e>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_write_r+0x1e>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	20000264 	.word	0x20000264

08003e8c <__errno>:
 8003e8c:	4b01      	ldr	r3, [pc, #4]	; (8003e94 <__errno+0x8>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000064 	.word	0x20000064

08003e98 <__libc_init_array>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ed0 <__libc_init_array+0x38>)
 8003e9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <__libc_init_array+0x3c>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	42a6      	cmp	r6, r4
 8003ea6:	d109      	bne.n	8003ebc <__libc_init_array+0x24>
 8003ea8:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <__libc_init_array+0x40>)
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <__libc_init_array+0x44>)
 8003eac:	f000 fdbe 	bl	8004a2c <_init>
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	42a6      	cmp	r6, r4
 8003eb8:	d105      	bne.n	8003ec6 <__libc_init_array+0x2e>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec0:	4798      	blx	r3
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__libc_init_array+0xc>
 8003ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eca:	4798      	blx	r3
 8003ecc:	3601      	adds	r6, #1
 8003ece:	e7f2      	b.n	8003eb6 <__libc_init_array+0x1e>
 8003ed0:	08004aa0 	.word	0x08004aa0
 8003ed4:	08004aa0 	.word	0x08004aa0
 8003ed8:	08004aa0 	.word	0x08004aa0
 8003edc:	08004aa4 	.word	0x08004aa4

08003ee0 <__retarget_lock_acquire_recursive>:
 8003ee0:	4770      	bx	lr

08003ee2 <__retarget_lock_release_recursive>:
 8003ee2:	4770      	bx	lr

08003ee4 <_free_r>:
 8003ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ee6:	2900      	cmp	r1, #0
 8003ee8:	d044      	beq.n	8003f74 <_free_r+0x90>
 8003eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eee:	9001      	str	r0, [sp, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ef6:	bfb8      	it	lt
 8003ef8:	18e4      	addlt	r4, r4, r3
 8003efa:	f000 f8df 	bl	80040bc <__malloc_lock>
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <_free_r+0x94>)
 8003f00:	9801      	ldr	r0, [sp, #4]
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	b933      	cbnz	r3, 8003f14 <_free_r+0x30>
 8003f06:	6063      	str	r3, [r4, #4]
 8003f08:	6014      	str	r4, [r2, #0]
 8003f0a:	b003      	add	sp, #12
 8003f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f10:	f000 b8da 	b.w	80040c8 <__malloc_unlock>
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d908      	bls.n	8003f2a <_free_r+0x46>
 8003f18:	6825      	ldr	r5, [r4, #0]
 8003f1a:	1961      	adds	r1, r4, r5
 8003f1c:	428b      	cmp	r3, r1
 8003f1e:	bf01      	itttt	eq
 8003f20:	6819      	ldreq	r1, [r3, #0]
 8003f22:	685b      	ldreq	r3, [r3, #4]
 8003f24:	1949      	addeq	r1, r1, r5
 8003f26:	6021      	streq	r1, [r4, #0]
 8003f28:	e7ed      	b.n	8003f06 <_free_r+0x22>
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b10b      	cbz	r3, 8003f34 <_free_r+0x50>
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	d9fa      	bls.n	8003f2a <_free_r+0x46>
 8003f34:	6811      	ldr	r1, [r2, #0]
 8003f36:	1855      	adds	r5, r2, r1
 8003f38:	42a5      	cmp	r5, r4
 8003f3a:	d10b      	bne.n	8003f54 <_free_r+0x70>
 8003f3c:	6824      	ldr	r4, [r4, #0]
 8003f3e:	4421      	add	r1, r4
 8003f40:	1854      	adds	r4, r2, r1
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	6011      	str	r1, [r2, #0]
 8003f46:	d1e0      	bne.n	8003f0a <_free_r+0x26>
 8003f48:	681c      	ldr	r4, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	6053      	str	r3, [r2, #4]
 8003f4e:	440c      	add	r4, r1
 8003f50:	6014      	str	r4, [r2, #0]
 8003f52:	e7da      	b.n	8003f0a <_free_r+0x26>
 8003f54:	d902      	bls.n	8003f5c <_free_r+0x78>
 8003f56:	230c      	movs	r3, #12
 8003f58:	6003      	str	r3, [r0, #0]
 8003f5a:	e7d6      	b.n	8003f0a <_free_r+0x26>
 8003f5c:	6825      	ldr	r5, [r4, #0]
 8003f5e:	1961      	adds	r1, r4, r5
 8003f60:	428b      	cmp	r3, r1
 8003f62:	bf04      	itt	eq
 8003f64:	6819      	ldreq	r1, [r3, #0]
 8003f66:	685b      	ldreq	r3, [r3, #4]
 8003f68:	6063      	str	r3, [r4, #4]
 8003f6a:	bf04      	itt	eq
 8003f6c:	1949      	addeq	r1, r1, r5
 8003f6e:	6021      	streq	r1, [r4, #0]
 8003f70:	6054      	str	r4, [r2, #4]
 8003f72:	e7ca      	b.n	8003f0a <_free_r+0x26>
 8003f74:	b003      	add	sp, #12
 8003f76:	bd30      	pop	{r4, r5, pc}
 8003f78:	2000026c 	.word	0x2000026c

08003f7c <sbrk_aligned>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	4e0e      	ldr	r6, [pc, #56]	; (8003fb8 <sbrk_aligned+0x3c>)
 8003f80:	460c      	mov	r4, r1
 8003f82:	6831      	ldr	r1, [r6, #0]
 8003f84:	4605      	mov	r5, r0
 8003f86:	b911      	cbnz	r1, 8003f8e <sbrk_aligned+0x12>
 8003f88:	f000 fcbc 	bl	8004904 <_sbrk_r>
 8003f8c:	6030      	str	r0, [r6, #0]
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 fcb7 	bl	8004904 <_sbrk_r>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	d00a      	beq.n	8003fb0 <sbrk_aligned+0x34>
 8003f9a:	1cc4      	adds	r4, r0, #3
 8003f9c:	f024 0403 	bic.w	r4, r4, #3
 8003fa0:	42a0      	cmp	r0, r4
 8003fa2:	d007      	beq.n	8003fb4 <sbrk_aligned+0x38>
 8003fa4:	1a21      	subs	r1, r4, r0
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 fcac 	bl	8004904 <_sbrk_r>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d101      	bne.n	8003fb4 <sbrk_aligned+0x38>
 8003fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	20000270 	.word	0x20000270

08003fbc <_malloc_r>:
 8003fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fc0:	1ccd      	adds	r5, r1, #3
 8003fc2:	f025 0503 	bic.w	r5, r5, #3
 8003fc6:	3508      	adds	r5, #8
 8003fc8:	2d0c      	cmp	r5, #12
 8003fca:	bf38      	it	cc
 8003fcc:	250c      	movcc	r5, #12
 8003fce:	2d00      	cmp	r5, #0
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	db01      	blt.n	8003fd8 <_malloc_r+0x1c>
 8003fd4:	42a9      	cmp	r1, r5
 8003fd6:	d905      	bls.n	8003fe4 <_malloc_r+0x28>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	2600      	movs	r6, #0
 8003fde:	4630      	mov	r0, r6
 8003fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040b8 <_malloc_r+0xfc>
 8003fe8:	f000 f868 	bl	80040bc <__malloc_lock>
 8003fec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ff0:	461c      	mov	r4, r3
 8003ff2:	bb5c      	cbnz	r4, 800404c <_malloc_r+0x90>
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	f7ff ffc0 	bl	8003f7c <sbrk_aligned>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	4604      	mov	r4, r0
 8004000:	d155      	bne.n	80040ae <_malloc_r+0xf2>
 8004002:	f8d8 4000 	ldr.w	r4, [r8]
 8004006:	4626      	mov	r6, r4
 8004008:	2e00      	cmp	r6, #0
 800400a:	d145      	bne.n	8004098 <_malloc_r+0xdc>
 800400c:	2c00      	cmp	r4, #0
 800400e:	d048      	beq.n	80040a2 <_malloc_r+0xe6>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	4631      	mov	r1, r6
 8004014:	4638      	mov	r0, r7
 8004016:	eb04 0903 	add.w	r9, r4, r3
 800401a:	f000 fc73 	bl	8004904 <_sbrk_r>
 800401e:	4581      	cmp	r9, r0
 8004020:	d13f      	bne.n	80040a2 <_malloc_r+0xe6>
 8004022:	6821      	ldr	r1, [r4, #0]
 8004024:	1a6d      	subs	r5, r5, r1
 8004026:	4629      	mov	r1, r5
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff ffa7 	bl	8003f7c <sbrk_aligned>
 800402e:	3001      	adds	r0, #1
 8004030:	d037      	beq.n	80040a2 <_malloc_r+0xe6>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	442b      	add	r3, r5
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	f8d8 3000 	ldr.w	r3, [r8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d038      	beq.n	80040b2 <_malloc_r+0xf6>
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	42a2      	cmp	r2, r4
 8004044:	d12b      	bne.n	800409e <_malloc_r+0xe2>
 8004046:	2200      	movs	r2, #0
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	e00f      	b.n	800406c <_malloc_r+0xb0>
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	1b52      	subs	r2, r2, r5
 8004050:	d41f      	bmi.n	8004092 <_malloc_r+0xd6>
 8004052:	2a0b      	cmp	r2, #11
 8004054:	d917      	bls.n	8004086 <_malloc_r+0xca>
 8004056:	1961      	adds	r1, r4, r5
 8004058:	42a3      	cmp	r3, r4
 800405a:	6025      	str	r5, [r4, #0]
 800405c:	bf18      	it	ne
 800405e:	6059      	strne	r1, [r3, #4]
 8004060:	6863      	ldr	r3, [r4, #4]
 8004062:	bf08      	it	eq
 8004064:	f8c8 1000 	streq.w	r1, [r8]
 8004068:	5162      	str	r2, [r4, r5]
 800406a:	604b      	str	r3, [r1, #4]
 800406c:	4638      	mov	r0, r7
 800406e:	f104 060b 	add.w	r6, r4, #11
 8004072:	f000 f829 	bl	80040c8 <__malloc_unlock>
 8004076:	f026 0607 	bic.w	r6, r6, #7
 800407a:	1d23      	adds	r3, r4, #4
 800407c:	1af2      	subs	r2, r6, r3
 800407e:	d0ae      	beq.n	8003fde <_malloc_r+0x22>
 8004080:	1b9b      	subs	r3, r3, r6
 8004082:	50a3      	str	r3, [r4, r2]
 8004084:	e7ab      	b.n	8003fde <_malloc_r+0x22>
 8004086:	42a3      	cmp	r3, r4
 8004088:	6862      	ldr	r2, [r4, #4]
 800408a:	d1dd      	bne.n	8004048 <_malloc_r+0x8c>
 800408c:	f8c8 2000 	str.w	r2, [r8]
 8004090:	e7ec      	b.n	800406c <_malloc_r+0xb0>
 8004092:	4623      	mov	r3, r4
 8004094:	6864      	ldr	r4, [r4, #4]
 8004096:	e7ac      	b.n	8003ff2 <_malloc_r+0x36>
 8004098:	4634      	mov	r4, r6
 800409a:	6876      	ldr	r6, [r6, #4]
 800409c:	e7b4      	b.n	8004008 <_malloc_r+0x4c>
 800409e:	4613      	mov	r3, r2
 80040a0:	e7cc      	b.n	800403c <_malloc_r+0x80>
 80040a2:	230c      	movs	r3, #12
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4638      	mov	r0, r7
 80040a8:	f000 f80e 	bl	80040c8 <__malloc_unlock>
 80040ac:	e797      	b.n	8003fde <_malloc_r+0x22>
 80040ae:	6025      	str	r5, [r4, #0]
 80040b0:	e7dc      	b.n	800406c <_malloc_r+0xb0>
 80040b2:	605b      	str	r3, [r3, #4]
 80040b4:	deff      	udf	#255	; 0xff
 80040b6:	bf00      	nop
 80040b8:	2000026c 	.word	0x2000026c

080040bc <__malloc_lock>:
 80040bc:	4801      	ldr	r0, [pc, #4]	; (80040c4 <__malloc_lock+0x8>)
 80040be:	f7ff bf0f 	b.w	8003ee0 <__retarget_lock_acquire_recursive>
 80040c2:	bf00      	nop
 80040c4:	20000268 	.word	0x20000268

080040c8 <__malloc_unlock>:
 80040c8:	4801      	ldr	r0, [pc, #4]	; (80040d0 <__malloc_unlock+0x8>)
 80040ca:	f7ff bf0a 	b.w	8003ee2 <__retarget_lock_release_recursive>
 80040ce:	bf00      	nop
 80040d0:	20000268 	.word	0x20000268

080040d4 <__sfputc_r>:
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	b410      	push	{r4}
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	da08      	bge.n	80040f2 <__sfputc_r+0x1e>
 80040e0:	6994      	ldr	r4, [r2, #24]
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	db01      	blt.n	80040ea <__sfputc_r+0x16>
 80040e6:	290a      	cmp	r1, #10
 80040e8:	d103      	bne.n	80040f2 <__sfputc_r+0x1e>
 80040ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ee:	f000 bb73 	b.w	80047d8 <__swbuf_r>
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	1c58      	adds	r0, r3, #1
 80040f6:	6010      	str	r0, [r2, #0]
 80040f8:	7019      	strb	r1, [r3, #0]
 80040fa:	4608      	mov	r0, r1
 80040fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004100:	4770      	bx	lr

08004102 <__sfputs_r>:
 8004102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	4614      	mov	r4, r2
 800410a:	18d5      	adds	r5, r2, r3
 800410c:	42ac      	cmp	r4, r5
 800410e:	d101      	bne.n	8004114 <__sfputs_r+0x12>
 8004110:	2000      	movs	r0, #0
 8004112:	e007      	b.n	8004124 <__sfputs_r+0x22>
 8004114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004118:	463a      	mov	r2, r7
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff ffda 	bl	80040d4 <__sfputc_r>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d1f3      	bne.n	800410c <__sfputs_r+0xa>
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004128 <_vfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	460d      	mov	r5, r1
 800412e:	b09d      	sub	sp, #116	; 0x74
 8004130:	4614      	mov	r4, r2
 8004132:	4698      	mov	r8, r3
 8004134:	4606      	mov	r6, r0
 8004136:	b118      	cbz	r0, 8004140 <_vfiprintf_r+0x18>
 8004138:	6a03      	ldr	r3, [r0, #32]
 800413a:	b90b      	cbnz	r3, 8004140 <_vfiprintf_r+0x18>
 800413c:	f7ff fdcc 	bl	8003cd8 <__sinit>
 8004140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004142:	07d9      	lsls	r1, r3, #31
 8004144:	d405      	bmi.n	8004152 <_vfiprintf_r+0x2a>
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	059a      	lsls	r2, r3, #22
 800414a:	d402      	bmi.n	8004152 <_vfiprintf_r+0x2a>
 800414c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800414e:	f7ff fec7 	bl	8003ee0 <__retarget_lock_acquire_recursive>
 8004152:	89ab      	ldrh	r3, [r5, #12]
 8004154:	071b      	lsls	r3, r3, #28
 8004156:	d501      	bpl.n	800415c <_vfiprintf_r+0x34>
 8004158:	692b      	ldr	r3, [r5, #16]
 800415a:	b99b      	cbnz	r3, 8004184 <_vfiprintf_r+0x5c>
 800415c:	4629      	mov	r1, r5
 800415e:	4630      	mov	r0, r6
 8004160:	f000 fb78 	bl	8004854 <__swsetup_r>
 8004164:	b170      	cbz	r0, 8004184 <_vfiprintf_r+0x5c>
 8004166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004168:	07dc      	lsls	r4, r3, #31
 800416a:	d504      	bpl.n	8004176 <_vfiprintf_r+0x4e>
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	b01d      	add	sp, #116	; 0x74
 8004172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	0598      	lsls	r0, r3, #22
 800417a:	d4f7      	bmi.n	800416c <_vfiprintf_r+0x44>
 800417c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800417e:	f7ff feb0 	bl	8003ee2 <__retarget_lock_release_recursive>
 8004182:	e7f3      	b.n	800416c <_vfiprintf_r+0x44>
 8004184:	2300      	movs	r3, #0
 8004186:	9309      	str	r3, [sp, #36]	; 0x24
 8004188:	2320      	movs	r3, #32
 800418a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800418e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004192:	2330      	movs	r3, #48	; 0x30
 8004194:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004348 <_vfiprintf_r+0x220>
 8004198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800419c:	f04f 0901 	mov.w	r9, #1
 80041a0:	4623      	mov	r3, r4
 80041a2:	469a      	mov	sl, r3
 80041a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a8:	b10a      	cbz	r2, 80041ae <_vfiprintf_r+0x86>
 80041aa:	2a25      	cmp	r2, #37	; 0x25
 80041ac:	d1f9      	bne.n	80041a2 <_vfiprintf_r+0x7a>
 80041ae:	ebba 0b04 	subs.w	fp, sl, r4
 80041b2:	d00b      	beq.n	80041cc <_vfiprintf_r+0xa4>
 80041b4:	465b      	mov	r3, fp
 80041b6:	4622      	mov	r2, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	4630      	mov	r0, r6
 80041bc:	f7ff ffa1 	bl	8004102 <__sfputs_r>
 80041c0:	3001      	adds	r0, #1
 80041c2:	f000 80a9 	beq.w	8004318 <_vfiprintf_r+0x1f0>
 80041c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041c8:	445a      	add	r2, fp
 80041ca:	9209      	str	r2, [sp, #36]	; 0x24
 80041cc:	f89a 3000 	ldrb.w	r3, [sl]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a1 	beq.w	8004318 <_vfiprintf_r+0x1f0>
 80041d6:	2300      	movs	r3, #0
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041e0:	f10a 0a01 	add.w	sl, sl, #1
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	9307      	str	r3, [sp, #28]
 80041e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041ec:	931a      	str	r3, [sp, #104]	; 0x68
 80041ee:	4654      	mov	r4, sl
 80041f0:	2205      	movs	r2, #5
 80041f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f6:	4854      	ldr	r0, [pc, #336]	; (8004348 <_vfiprintf_r+0x220>)
 80041f8:	f7fb fff2 	bl	80001e0 <memchr>
 80041fc:	9a04      	ldr	r2, [sp, #16]
 80041fe:	b9d8      	cbnz	r0, 8004238 <_vfiprintf_r+0x110>
 8004200:	06d1      	lsls	r1, r2, #27
 8004202:	bf44      	itt	mi
 8004204:	2320      	movmi	r3, #32
 8004206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800420a:	0713      	lsls	r3, r2, #28
 800420c:	bf44      	itt	mi
 800420e:	232b      	movmi	r3, #43	; 0x2b
 8004210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004214:	f89a 3000 	ldrb.w	r3, [sl]
 8004218:	2b2a      	cmp	r3, #42	; 0x2a
 800421a:	d015      	beq.n	8004248 <_vfiprintf_r+0x120>
 800421c:	9a07      	ldr	r2, [sp, #28]
 800421e:	4654      	mov	r4, sl
 8004220:	2000      	movs	r0, #0
 8004222:	f04f 0c0a 	mov.w	ip, #10
 8004226:	4621      	mov	r1, r4
 8004228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800422c:	3b30      	subs	r3, #48	; 0x30
 800422e:	2b09      	cmp	r3, #9
 8004230:	d94d      	bls.n	80042ce <_vfiprintf_r+0x1a6>
 8004232:	b1b0      	cbz	r0, 8004262 <_vfiprintf_r+0x13a>
 8004234:	9207      	str	r2, [sp, #28]
 8004236:	e014      	b.n	8004262 <_vfiprintf_r+0x13a>
 8004238:	eba0 0308 	sub.w	r3, r0, r8
 800423c:	fa09 f303 	lsl.w	r3, r9, r3
 8004240:	4313      	orrs	r3, r2
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	46a2      	mov	sl, r4
 8004246:	e7d2      	b.n	80041ee <_vfiprintf_r+0xc6>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	1d19      	adds	r1, r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	9103      	str	r1, [sp, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	bfbb      	ittet	lt
 8004254:	425b      	neglt	r3, r3
 8004256:	f042 0202 	orrlt.w	r2, r2, #2
 800425a:	9307      	strge	r3, [sp, #28]
 800425c:	9307      	strlt	r3, [sp, #28]
 800425e:	bfb8      	it	lt
 8004260:	9204      	strlt	r2, [sp, #16]
 8004262:	7823      	ldrb	r3, [r4, #0]
 8004264:	2b2e      	cmp	r3, #46	; 0x2e
 8004266:	d10c      	bne.n	8004282 <_vfiprintf_r+0x15a>
 8004268:	7863      	ldrb	r3, [r4, #1]
 800426a:	2b2a      	cmp	r3, #42	; 0x2a
 800426c:	d134      	bne.n	80042d8 <_vfiprintf_r+0x1b0>
 800426e:	9b03      	ldr	r3, [sp, #12]
 8004270:	1d1a      	adds	r2, r3, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	9203      	str	r2, [sp, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	bfb8      	it	lt
 800427a:	f04f 33ff 	movlt.w	r3, #4294967295
 800427e:	3402      	adds	r4, #2
 8004280:	9305      	str	r3, [sp, #20]
 8004282:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004358 <_vfiprintf_r+0x230>
 8004286:	7821      	ldrb	r1, [r4, #0]
 8004288:	2203      	movs	r2, #3
 800428a:	4650      	mov	r0, sl
 800428c:	f7fb ffa8 	bl	80001e0 <memchr>
 8004290:	b138      	cbz	r0, 80042a2 <_vfiprintf_r+0x17a>
 8004292:	9b04      	ldr	r3, [sp, #16]
 8004294:	eba0 000a 	sub.w	r0, r0, sl
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	4082      	lsls	r2, r0
 800429c:	4313      	orrs	r3, r2
 800429e:	3401      	adds	r4, #1
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a6:	4829      	ldr	r0, [pc, #164]	; (800434c <_vfiprintf_r+0x224>)
 80042a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ac:	2206      	movs	r2, #6
 80042ae:	f7fb ff97 	bl	80001e0 <memchr>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d03f      	beq.n	8004336 <_vfiprintf_r+0x20e>
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <_vfiprintf_r+0x228>)
 80042b8:	bb1b      	cbnz	r3, 8004302 <_vfiprintf_r+0x1da>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	3307      	adds	r3, #7
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	3308      	adds	r3, #8
 80042c4:	9303      	str	r3, [sp, #12]
 80042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c8:	443b      	add	r3, r7
 80042ca:	9309      	str	r3, [sp, #36]	; 0x24
 80042cc:	e768      	b.n	80041a0 <_vfiprintf_r+0x78>
 80042ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80042d2:	460c      	mov	r4, r1
 80042d4:	2001      	movs	r0, #1
 80042d6:	e7a6      	b.n	8004226 <_vfiprintf_r+0xfe>
 80042d8:	2300      	movs	r3, #0
 80042da:	3401      	adds	r4, #1
 80042dc:	9305      	str	r3, [sp, #20]
 80042de:	4619      	mov	r1, r3
 80042e0:	f04f 0c0a 	mov.w	ip, #10
 80042e4:	4620      	mov	r0, r4
 80042e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042ea:	3a30      	subs	r2, #48	; 0x30
 80042ec:	2a09      	cmp	r2, #9
 80042ee:	d903      	bls.n	80042f8 <_vfiprintf_r+0x1d0>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0c6      	beq.n	8004282 <_vfiprintf_r+0x15a>
 80042f4:	9105      	str	r1, [sp, #20]
 80042f6:	e7c4      	b.n	8004282 <_vfiprintf_r+0x15a>
 80042f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80042fc:	4604      	mov	r4, r0
 80042fe:	2301      	movs	r3, #1
 8004300:	e7f0      	b.n	80042e4 <_vfiprintf_r+0x1bc>
 8004302:	ab03      	add	r3, sp, #12
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	462a      	mov	r2, r5
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <_vfiprintf_r+0x22c>)
 800430a:	a904      	add	r1, sp, #16
 800430c:	4630      	mov	r0, r6
 800430e:	f3af 8000 	nop.w
 8004312:	4607      	mov	r7, r0
 8004314:	1c78      	adds	r0, r7, #1
 8004316:	d1d6      	bne.n	80042c6 <_vfiprintf_r+0x19e>
 8004318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800431a:	07d9      	lsls	r1, r3, #31
 800431c:	d405      	bmi.n	800432a <_vfiprintf_r+0x202>
 800431e:	89ab      	ldrh	r3, [r5, #12]
 8004320:	059a      	lsls	r2, r3, #22
 8004322:	d402      	bmi.n	800432a <_vfiprintf_r+0x202>
 8004324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004326:	f7ff fddc 	bl	8003ee2 <__retarget_lock_release_recursive>
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	065b      	lsls	r3, r3, #25
 800432e:	f53f af1d 	bmi.w	800416c <_vfiprintf_r+0x44>
 8004332:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004334:	e71c      	b.n	8004170 <_vfiprintf_r+0x48>
 8004336:	ab03      	add	r3, sp, #12
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	462a      	mov	r2, r5
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <_vfiprintf_r+0x22c>)
 800433e:	a904      	add	r1, sp, #16
 8004340:	4630      	mov	r0, r6
 8004342:	f000 f879 	bl	8004438 <_printf_i>
 8004346:	e7e4      	b.n	8004312 <_vfiprintf_r+0x1ea>
 8004348:	08004a64 	.word	0x08004a64
 800434c:	08004a6e 	.word	0x08004a6e
 8004350:	00000000 	.word	0x00000000
 8004354:	08004103 	.word	0x08004103
 8004358:	08004a6a 	.word	0x08004a6a

0800435c <_printf_common>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	4616      	mov	r6, r2
 8004362:	4699      	mov	r9, r3
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	690b      	ldr	r3, [r1, #16]
 8004368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800436c:	4293      	cmp	r3, r2
 800436e:	bfb8      	it	lt
 8004370:	4613      	movlt	r3, r2
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004378:	4607      	mov	r7, r0
 800437a:	460c      	mov	r4, r1
 800437c:	b10a      	cbz	r2, 8004382 <_printf_common+0x26>
 800437e:	3301      	adds	r3, #1
 8004380:	6033      	str	r3, [r6, #0]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	0699      	lsls	r1, r3, #26
 8004386:	bf42      	ittt	mi
 8004388:	6833      	ldrmi	r3, [r6, #0]
 800438a:	3302      	addmi	r3, #2
 800438c:	6033      	strmi	r3, [r6, #0]
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	f015 0506 	ands.w	r5, r5, #6
 8004394:	d106      	bne.n	80043a4 <_printf_common+0x48>
 8004396:	f104 0a19 	add.w	sl, r4, #25
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	6832      	ldr	r2, [r6, #0]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dc26      	bgt.n	80043f2 <_printf_common+0x96>
 80043a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043a8:	1e13      	subs	r3, r2, #0
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	bf18      	it	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	0692      	lsls	r2, r2, #26
 80043b2:	d42b      	bmi.n	800440c <_printf_common+0xb0>
 80043b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043b8:	4649      	mov	r1, r9
 80043ba:	4638      	mov	r0, r7
 80043bc:	47c0      	blx	r8
 80043be:	3001      	adds	r0, #1
 80043c0:	d01e      	beq.n	8004400 <_printf_common+0xa4>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	6922      	ldr	r2, [r4, #16]
 80043c6:	f003 0306 	and.w	r3, r3, #6
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf02      	ittt	eq
 80043ce:	68e5      	ldreq	r5, [r4, #12]
 80043d0:	6833      	ldreq	r3, [r6, #0]
 80043d2:	1aed      	subeq	r5, r5, r3
 80043d4:	68a3      	ldr	r3, [r4, #8]
 80043d6:	bf0c      	ite	eq
 80043d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043dc:	2500      	movne	r5, #0
 80043de:	4293      	cmp	r3, r2
 80043e0:	bfc4      	itt	gt
 80043e2:	1a9b      	subgt	r3, r3, r2
 80043e4:	18ed      	addgt	r5, r5, r3
 80043e6:	2600      	movs	r6, #0
 80043e8:	341a      	adds	r4, #26
 80043ea:	42b5      	cmp	r5, r6
 80043ec:	d11a      	bne.n	8004424 <_printf_common+0xc8>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e008      	b.n	8004404 <_printf_common+0xa8>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4652      	mov	r2, sl
 80043f6:	4649      	mov	r1, r9
 80043f8:	4638      	mov	r0, r7
 80043fa:	47c0      	blx	r8
 80043fc:	3001      	adds	r0, #1
 80043fe:	d103      	bne.n	8004408 <_printf_common+0xac>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	3501      	adds	r5, #1
 800440a:	e7c6      	b.n	800439a <_printf_common+0x3e>
 800440c:	18e1      	adds	r1, r4, r3
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	2030      	movs	r0, #48	; 0x30
 8004412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004416:	4422      	add	r2, r4
 8004418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800441c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004420:	3302      	adds	r3, #2
 8004422:	e7c7      	b.n	80043b4 <_printf_common+0x58>
 8004424:	2301      	movs	r3, #1
 8004426:	4622      	mov	r2, r4
 8004428:	4649      	mov	r1, r9
 800442a:	4638      	mov	r0, r7
 800442c:	47c0      	blx	r8
 800442e:	3001      	adds	r0, #1
 8004430:	d0e6      	beq.n	8004400 <_printf_common+0xa4>
 8004432:	3601      	adds	r6, #1
 8004434:	e7d9      	b.n	80043ea <_printf_common+0x8e>
	...

08004438 <_printf_i>:
 8004438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	7e0f      	ldrb	r7, [r1, #24]
 800443e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004440:	2f78      	cmp	r7, #120	; 0x78
 8004442:	4691      	mov	r9, r2
 8004444:	4680      	mov	r8, r0
 8004446:	460c      	mov	r4, r1
 8004448:	469a      	mov	sl, r3
 800444a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800444e:	d807      	bhi.n	8004460 <_printf_i+0x28>
 8004450:	2f62      	cmp	r7, #98	; 0x62
 8004452:	d80a      	bhi.n	800446a <_printf_i+0x32>
 8004454:	2f00      	cmp	r7, #0
 8004456:	f000 80d4 	beq.w	8004602 <_printf_i+0x1ca>
 800445a:	2f58      	cmp	r7, #88	; 0x58
 800445c:	f000 80c0 	beq.w	80045e0 <_printf_i+0x1a8>
 8004460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004468:	e03a      	b.n	80044e0 <_printf_i+0xa8>
 800446a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800446e:	2b15      	cmp	r3, #21
 8004470:	d8f6      	bhi.n	8004460 <_printf_i+0x28>
 8004472:	a101      	add	r1, pc, #4	; (adr r1, 8004478 <_printf_i+0x40>)
 8004474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044e5 	.word	0x080044e5
 8004480:	08004461 	.word	0x08004461
 8004484:	08004461 	.word	0x08004461
 8004488:	08004461 	.word	0x08004461
 800448c:	08004461 	.word	0x08004461
 8004490:	080044e5 	.word	0x080044e5
 8004494:	08004461 	.word	0x08004461
 8004498:	08004461 	.word	0x08004461
 800449c:	08004461 	.word	0x08004461
 80044a0:	08004461 	.word	0x08004461
 80044a4:	080045e9 	.word	0x080045e9
 80044a8:	08004511 	.word	0x08004511
 80044ac:	080045a3 	.word	0x080045a3
 80044b0:	08004461 	.word	0x08004461
 80044b4:	08004461 	.word	0x08004461
 80044b8:	0800460b 	.word	0x0800460b
 80044bc:	08004461 	.word	0x08004461
 80044c0:	08004511 	.word	0x08004511
 80044c4:	08004461 	.word	0x08004461
 80044c8:	08004461 	.word	0x08004461
 80044cc:	080045ab 	.word	0x080045ab
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	602a      	str	r2, [r5, #0]
 80044d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e0:	2301      	movs	r3, #1
 80044e2:	e09f      	b.n	8004624 <_printf_i+0x1ec>
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	682b      	ldr	r3, [r5, #0]
 80044e8:	0607      	lsls	r7, r0, #24
 80044ea:	f103 0104 	add.w	r1, r3, #4
 80044ee:	6029      	str	r1, [r5, #0]
 80044f0:	d501      	bpl.n	80044f6 <_printf_i+0xbe>
 80044f2:	681e      	ldr	r6, [r3, #0]
 80044f4:	e003      	b.n	80044fe <_printf_i+0xc6>
 80044f6:	0646      	lsls	r6, r0, #25
 80044f8:	d5fb      	bpl.n	80044f2 <_printf_i+0xba>
 80044fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044fe:	2e00      	cmp	r6, #0
 8004500:	da03      	bge.n	800450a <_printf_i+0xd2>
 8004502:	232d      	movs	r3, #45	; 0x2d
 8004504:	4276      	negs	r6, r6
 8004506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450a:	485a      	ldr	r0, [pc, #360]	; (8004674 <_printf_i+0x23c>)
 800450c:	230a      	movs	r3, #10
 800450e:	e012      	b.n	8004536 <_printf_i+0xfe>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	1d19      	adds	r1, r3, #4
 8004516:	6029      	str	r1, [r5, #0]
 8004518:	0605      	lsls	r5, r0, #24
 800451a:	d501      	bpl.n	8004520 <_printf_i+0xe8>
 800451c:	681e      	ldr	r6, [r3, #0]
 800451e:	e002      	b.n	8004526 <_printf_i+0xee>
 8004520:	0641      	lsls	r1, r0, #25
 8004522:	d5fb      	bpl.n	800451c <_printf_i+0xe4>
 8004524:	881e      	ldrh	r6, [r3, #0]
 8004526:	4853      	ldr	r0, [pc, #332]	; (8004674 <_printf_i+0x23c>)
 8004528:	2f6f      	cmp	r7, #111	; 0x6f
 800452a:	bf0c      	ite	eq
 800452c:	2308      	moveq	r3, #8
 800452e:	230a      	movne	r3, #10
 8004530:	2100      	movs	r1, #0
 8004532:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004536:	6865      	ldr	r5, [r4, #4]
 8004538:	60a5      	str	r5, [r4, #8]
 800453a:	2d00      	cmp	r5, #0
 800453c:	bfa2      	ittt	ge
 800453e:	6821      	ldrge	r1, [r4, #0]
 8004540:	f021 0104 	bicge.w	r1, r1, #4
 8004544:	6021      	strge	r1, [r4, #0]
 8004546:	b90e      	cbnz	r6, 800454c <_printf_i+0x114>
 8004548:	2d00      	cmp	r5, #0
 800454a:	d04b      	beq.n	80045e4 <_printf_i+0x1ac>
 800454c:	4615      	mov	r5, r2
 800454e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004552:	fb03 6711 	mls	r7, r3, r1, r6
 8004556:	5dc7      	ldrb	r7, [r0, r7]
 8004558:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800455c:	4637      	mov	r7, r6
 800455e:	42bb      	cmp	r3, r7
 8004560:	460e      	mov	r6, r1
 8004562:	d9f4      	bls.n	800454e <_printf_i+0x116>
 8004564:	2b08      	cmp	r3, #8
 8004566:	d10b      	bne.n	8004580 <_printf_i+0x148>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	07de      	lsls	r6, r3, #31
 800456c:	d508      	bpl.n	8004580 <_printf_i+0x148>
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	6861      	ldr	r1, [r4, #4]
 8004572:	4299      	cmp	r1, r3
 8004574:	bfde      	ittt	le
 8004576:	2330      	movle	r3, #48	; 0x30
 8004578:	f805 3c01 	strble.w	r3, [r5, #-1]
 800457c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004580:	1b52      	subs	r2, r2, r5
 8004582:	6122      	str	r2, [r4, #16]
 8004584:	f8cd a000 	str.w	sl, [sp]
 8004588:	464b      	mov	r3, r9
 800458a:	aa03      	add	r2, sp, #12
 800458c:	4621      	mov	r1, r4
 800458e:	4640      	mov	r0, r8
 8004590:	f7ff fee4 	bl	800435c <_printf_common>
 8004594:	3001      	adds	r0, #1
 8004596:	d14a      	bne.n	800462e <_printf_i+0x1f6>
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	b004      	add	sp, #16
 800459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	f043 0320 	orr.w	r3, r3, #32
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	4833      	ldr	r0, [pc, #204]	; (8004678 <_printf_i+0x240>)
 80045ac:	2778      	movs	r7, #120	; 0x78
 80045ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	6829      	ldr	r1, [r5, #0]
 80045b6:	061f      	lsls	r7, r3, #24
 80045b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80045bc:	d402      	bmi.n	80045c4 <_printf_i+0x18c>
 80045be:	065f      	lsls	r7, r3, #25
 80045c0:	bf48      	it	mi
 80045c2:	b2b6      	uxthmi	r6, r6
 80045c4:	07df      	lsls	r7, r3, #31
 80045c6:	bf48      	it	mi
 80045c8:	f043 0320 	orrmi.w	r3, r3, #32
 80045cc:	6029      	str	r1, [r5, #0]
 80045ce:	bf48      	it	mi
 80045d0:	6023      	strmi	r3, [r4, #0]
 80045d2:	b91e      	cbnz	r6, 80045dc <_printf_i+0x1a4>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	2310      	movs	r3, #16
 80045de:	e7a7      	b.n	8004530 <_printf_i+0xf8>
 80045e0:	4824      	ldr	r0, [pc, #144]	; (8004674 <_printf_i+0x23c>)
 80045e2:	e7e4      	b.n	80045ae <_printf_i+0x176>
 80045e4:	4615      	mov	r5, r2
 80045e6:	e7bd      	b.n	8004564 <_printf_i+0x12c>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	6826      	ldr	r6, [r4, #0]
 80045ec:	6961      	ldr	r1, [r4, #20]
 80045ee:	1d18      	adds	r0, r3, #4
 80045f0:	6028      	str	r0, [r5, #0]
 80045f2:	0635      	lsls	r5, r6, #24
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	d501      	bpl.n	80045fc <_printf_i+0x1c4>
 80045f8:	6019      	str	r1, [r3, #0]
 80045fa:	e002      	b.n	8004602 <_printf_i+0x1ca>
 80045fc:	0670      	lsls	r0, r6, #25
 80045fe:	d5fb      	bpl.n	80045f8 <_printf_i+0x1c0>
 8004600:	8019      	strh	r1, [r3, #0]
 8004602:	2300      	movs	r3, #0
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	4615      	mov	r5, r2
 8004608:	e7bc      	b.n	8004584 <_printf_i+0x14c>
 800460a:	682b      	ldr	r3, [r5, #0]
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	602a      	str	r2, [r5, #0]
 8004610:	681d      	ldr	r5, [r3, #0]
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	2100      	movs	r1, #0
 8004616:	4628      	mov	r0, r5
 8004618:	f7fb fde2 	bl	80001e0 <memchr>
 800461c:	b108      	cbz	r0, 8004622 <_printf_i+0x1ea>
 800461e:	1b40      	subs	r0, r0, r5
 8004620:	6060      	str	r0, [r4, #4]
 8004622:	6863      	ldr	r3, [r4, #4]
 8004624:	6123      	str	r3, [r4, #16]
 8004626:	2300      	movs	r3, #0
 8004628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462c:	e7aa      	b.n	8004584 <_printf_i+0x14c>
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	462a      	mov	r2, r5
 8004632:	4649      	mov	r1, r9
 8004634:	4640      	mov	r0, r8
 8004636:	47d0      	blx	sl
 8004638:	3001      	adds	r0, #1
 800463a:	d0ad      	beq.n	8004598 <_printf_i+0x160>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	079b      	lsls	r3, r3, #30
 8004640:	d413      	bmi.n	800466a <_printf_i+0x232>
 8004642:	68e0      	ldr	r0, [r4, #12]
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	4298      	cmp	r0, r3
 8004648:	bfb8      	it	lt
 800464a:	4618      	movlt	r0, r3
 800464c:	e7a6      	b.n	800459c <_printf_i+0x164>
 800464e:	2301      	movs	r3, #1
 8004650:	4632      	mov	r2, r6
 8004652:	4649      	mov	r1, r9
 8004654:	4640      	mov	r0, r8
 8004656:	47d0      	blx	sl
 8004658:	3001      	adds	r0, #1
 800465a:	d09d      	beq.n	8004598 <_printf_i+0x160>
 800465c:	3501      	adds	r5, #1
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	9903      	ldr	r1, [sp, #12]
 8004662:	1a5b      	subs	r3, r3, r1
 8004664:	42ab      	cmp	r3, r5
 8004666:	dcf2      	bgt.n	800464e <_printf_i+0x216>
 8004668:	e7eb      	b.n	8004642 <_printf_i+0x20a>
 800466a:	2500      	movs	r5, #0
 800466c:	f104 0619 	add.w	r6, r4, #25
 8004670:	e7f5      	b.n	800465e <_printf_i+0x226>
 8004672:	bf00      	nop
 8004674:	08004a75 	.word	0x08004a75
 8004678:	08004a86 	.word	0x08004a86

0800467c <__sflush_r>:
 800467c:	898a      	ldrh	r2, [r1, #12]
 800467e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004682:	4605      	mov	r5, r0
 8004684:	0710      	lsls	r0, r2, #28
 8004686:	460c      	mov	r4, r1
 8004688:	d458      	bmi.n	800473c <__sflush_r+0xc0>
 800468a:	684b      	ldr	r3, [r1, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	dc05      	bgt.n	800469c <__sflush_r+0x20>
 8004690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	dc02      	bgt.n	800469c <__sflush_r+0x20>
 8004696:	2000      	movs	r0, #0
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800469c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800469e:	2e00      	cmp	r6, #0
 80046a0:	d0f9      	beq.n	8004696 <__sflush_r+0x1a>
 80046a2:	2300      	movs	r3, #0
 80046a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046a8:	682f      	ldr	r7, [r5, #0]
 80046aa:	6a21      	ldr	r1, [r4, #32]
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	d032      	beq.n	8004716 <__sflush_r+0x9a>
 80046b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	075a      	lsls	r2, r3, #29
 80046b6:	d505      	bpl.n	80046c4 <__sflush_r+0x48>
 80046b8:	6863      	ldr	r3, [r4, #4]
 80046ba:	1ac0      	subs	r0, r0, r3
 80046bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046be:	b10b      	cbz	r3, 80046c4 <__sflush_r+0x48>
 80046c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046c2:	1ac0      	subs	r0, r0, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	4602      	mov	r2, r0
 80046c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ca:	6a21      	ldr	r1, [r4, #32]
 80046cc:	4628      	mov	r0, r5
 80046ce:	47b0      	blx	r6
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	d106      	bne.n	80046e4 <__sflush_r+0x68>
 80046d6:	6829      	ldr	r1, [r5, #0]
 80046d8:	291d      	cmp	r1, #29
 80046da:	d82b      	bhi.n	8004734 <__sflush_r+0xb8>
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <__sflush_r+0x108>)
 80046de:	410a      	asrs	r2, r1
 80046e0:	07d6      	lsls	r6, r2, #31
 80046e2:	d427      	bmi.n	8004734 <__sflush_r+0xb8>
 80046e4:	2200      	movs	r2, #0
 80046e6:	6062      	str	r2, [r4, #4]
 80046e8:	04d9      	lsls	r1, r3, #19
 80046ea:	6922      	ldr	r2, [r4, #16]
 80046ec:	6022      	str	r2, [r4, #0]
 80046ee:	d504      	bpl.n	80046fa <__sflush_r+0x7e>
 80046f0:	1c42      	adds	r2, r0, #1
 80046f2:	d101      	bne.n	80046f8 <__sflush_r+0x7c>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b903      	cbnz	r3, 80046fa <__sflush_r+0x7e>
 80046f8:	6560      	str	r0, [r4, #84]	; 0x54
 80046fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046fc:	602f      	str	r7, [r5, #0]
 80046fe:	2900      	cmp	r1, #0
 8004700:	d0c9      	beq.n	8004696 <__sflush_r+0x1a>
 8004702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004706:	4299      	cmp	r1, r3
 8004708:	d002      	beq.n	8004710 <__sflush_r+0x94>
 800470a:	4628      	mov	r0, r5
 800470c:	f7ff fbea 	bl	8003ee4 <_free_r>
 8004710:	2000      	movs	r0, #0
 8004712:	6360      	str	r0, [r4, #52]	; 0x34
 8004714:	e7c0      	b.n	8004698 <__sflush_r+0x1c>
 8004716:	2301      	movs	r3, #1
 8004718:	4628      	mov	r0, r5
 800471a:	47b0      	blx	r6
 800471c:	1c41      	adds	r1, r0, #1
 800471e:	d1c8      	bne.n	80046b2 <__sflush_r+0x36>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0c5      	beq.n	80046b2 <__sflush_r+0x36>
 8004726:	2b1d      	cmp	r3, #29
 8004728:	d001      	beq.n	800472e <__sflush_r+0xb2>
 800472a:	2b16      	cmp	r3, #22
 800472c:	d101      	bne.n	8004732 <__sflush_r+0xb6>
 800472e:	602f      	str	r7, [r5, #0]
 8004730:	e7b1      	b.n	8004696 <__sflush_r+0x1a>
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004738:	81a3      	strh	r3, [r4, #12]
 800473a:	e7ad      	b.n	8004698 <__sflush_r+0x1c>
 800473c:	690f      	ldr	r7, [r1, #16]
 800473e:	2f00      	cmp	r7, #0
 8004740:	d0a9      	beq.n	8004696 <__sflush_r+0x1a>
 8004742:	0793      	lsls	r3, r2, #30
 8004744:	680e      	ldr	r6, [r1, #0]
 8004746:	bf08      	it	eq
 8004748:	694b      	ldreq	r3, [r1, #20]
 800474a:	600f      	str	r7, [r1, #0]
 800474c:	bf18      	it	ne
 800474e:	2300      	movne	r3, #0
 8004750:	eba6 0807 	sub.w	r8, r6, r7
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	f1b8 0f00 	cmp.w	r8, #0
 800475a:	dd9c      	ble.n	8004696 <__sflush_r+0x1a>
 800475c:	6a21      	ldr	r1, [r4, #32]
 800475e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004760:	4643      	mov	r3, r8
 8004762:	463a      	mov	r2, r7
 8004764:	4628      	mov	r0, r5
 8004766:	47b0      	blx	r6
 8004768:	2800      	cmp	r0, #0
 800476a:	dc06      	bgt.n	800477a <__sflush_r+0xfe>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e78e      	b.n	8004698 <__sflush_r+0x1c>
 800477a:	4407      	add	r7, r0
 800477c:	eba8 0800 	sub.w	r8, r8, r0
 8004780:	e7e9      	b.n	8004756 <__sflush_r+0xda>
 8004782:	bf00      	nop
 8004784:	dfbffffe 	.word	0xdfbffffe

08004788 <_fflush_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	690b      	ldr	r3, [r1, #16]
 800478c:	4605      	mov	r5, r0
 800478e:	460c      	mov	r4, r1
 8004790:	b913      	cbnz	r3, 8004798 <_fflush_r+0x10>
 8004792:	2500      	movs	r5, #0
 8004794:	4628      	mov	r0, r5
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	b118      	cbz	r0, 80047a2 <_fflush_r+0x1a>
 800479a:	6a03      	ldr	r3, [r0, #32]
 800479c:	b90b      	cbnz	r3, 80047a2 <_fflush_r+0x1a>
 800479e:	f7ff fa9b 	bl	8003cd8 <__sinit>
 80047a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f3      	beq.n	8004792 <_fflush_r+0xa>
 80047aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047ac:	07d0      	lsls	r0, r2, #31
 80047ae:	d404      	bmi.n	80047ba <_fflush_r+0x32>
 80047b0:	0599      	lsls	r1, r3, #22
 80047b2:	d402      	bmi.n	80047ba <_fflush_r+0x32>
 80047b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b6:	f7ff fb93 	bl	8003ee0 <__retarget_lock_acquire_recursive>
 80047ba:	4628      	mov	r0, r5
 80047bc:	4621      	mov	r1, r4
 80047be:	f7ff ff5d 	bl	800467c <__sflush_r>
 80047c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c4:	07da      	lsls	r2, r3, #31
 80047c6:	4605      	mov	r5, r0
 80047c8:	d4e4      	bmi.n	8004794 <_fflush_r+0xc>
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	059b      	lsls	r3, r3, #22
 80047ce:	d4e1      	bmi.n	8004794 <_fflush_r+0xc>
 80047d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047d2:	f7ff fb86 	bl	8003ee2 <__retarget_lock_release_recursive>
 80047d6:	e7dd      	b.n	8004794 <_fflush_r+0xc>

080047d8 <__swbuf_r>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	460e      	mov	r6, r1
 80047dc:	4614      	mov	r4, r2
 80047de:	4605      	mov	r5, r0
 80047e0:	b118      	cbz	r0, 80047ea <__swbuf_r+0x12>
 80047e2:	6a03      	ldr	r3, [r0, #32]
 80047e4:	b90b      	cbnz	r3, 80047ea <__swbuf_r+0x12>
 80047e6:	f7ff fa77 	bl	8003cd8 <__sinit>
 80047ea:	69a3      	ldr	r3, [r4, #24]
 80047ec:	60a3      	str	r3, [r4, #8]
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	071a      	lsls	r2, r3, #28
 80047f2:	d525      	bpl.n	8004840 <__swbuf_r+0x68>
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b31b      	cbz	r3, 8004840 <__swbuf_r+0x68>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	6922      	ldr	r2, [r4, #16]
 80047fc:	1a98      	subs	r0, r3, r2
 80047fe:	6963      	ldr	r3, [r4, #20]
 8004800:	b2f6      	uxtb	r6, r6
 8004802:	4283      	cmp	r3, r0
 8004804:	4637      	mov	r7, r6
 8004806:	dc04      	bgt.n	8004812 <__swbuf_r+0x3a>
 8004808:	4621      	mov	r1, r4
 800480a:	4628      	mov	r0, r5
 800480c:	f7ff ffbc 	bl	8004788 <_fflush_r>
 8004810:	b9e0      	cbnz	r0, 800484c <__swbuf_r+0x74>
 8004812:	68a3      	ldr	r3, [r4, #8]
 8004814:	3b01      	subs	r3, #1
 8004816:	60a3      	str	r3, [r4, #8]
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	6022      	str	r2, [r4, #0]
 800481e:	701e      	strb	r6, [r3, #0]
 8004820:	6962      	ldr	r2, [r4, #20]
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	429a      	cmp	r2, r3
 8004826:	d004      	beq.n	8004832 <__swbuf_r+0x5a>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	07db      	lsls	r3, r3, #31
 800482c:	d506      	bpl.n	800483c <__swbuf_r+0x64>
 800482e:	2e0a      	cmp	r6, #10
 8004830:	d104      	bne.n	800483c <__swbuf_r+0x64>
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f7ff ffa7 	bl	8004788 <_fflush_r>
 800483a:	b938      	cbnz	r0, 800484c <__swbuf_r+0x74>
 800483c:	4638      	mov	r0, r7
 800483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004840:	4621      	mov	r1, r4
 8004842:	4628      	mov	r0, r5
 8004844:	f000 f806 	bl	8004854 <__swsetup_r>
 8004848:	2800      	cmp	r0, #0
 800484a:	d0d5      	beq.n	80047f8 <__swbuf_r+0x20>
 800484c:	f04f 37ff 	mov.w	r7, #4294967295
 8004850:	e7f4      	b.n	800483c <__swbuf_r+0x64>
	...

08004854 <__swsetup_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <__swsetup_r+0xac>)
 8004858:	4605      	mov	r5, r0
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	460c      	mov	r4, r1
 800485e:	b118      	cbz	r0, 8004868 <__swsetup_r+0x14>
 8004860:	6a03      	ldr	r3, [r0, #32]
 8004862:	b90b      	cbnz	r3, 8004868 <__swsetup_r+0x14>
 8004864:	f7ff fa38 	bl	8003cd8 <__sinit>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800486e:	0718      	lsls	r0, r3, #28
 8004870:	d422      	bmi.n	80048b8 <__swsetup_r+0x64>
 8004872:	06d9      	lsls	r1, r3, #27
 8004874:	d407      	bmi.n	8004886 <__swsetup_r+0x32>
 8004876:	2309      	movs	r3, #9
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e034      	b.n	80048f0 <__swsetup_r+0x9c>
 8004886:	0758      	lsls	r0, r3, #29
 8004888:	d512      	bpl.n	80048b0 <__swsetup_r+0x5c>
 800488a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800488c:	b141      	cbz	r1, 80048a0 <__swsetup_r+0x4c>
 800488e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004892:	4299      	cmp	r1, r3
 8004894:	d002      	beq.n	800489c <__swsetup_r+0x48>
 8004896:	4628      	mov	r0, r5
 8004898:	f7ff fb24 	bl	8003ee4 <_free_r>
 800489c:	2300      	movs	r3, #0
 800489e:	6363      	str	r3, [r4, #52]	; 0x34
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	2300      	movs	r3, #0
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f043 0308 	orr.w	r3, r3, #8
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b94b      	cbnz	r3, 80048d0 <__swsetup_r+0x7c>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d003      	beq.n	80048d0 <__swsetup_r+0x7c>
 80048c8:	4621      	mov	r1, r4
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 f850 	bl	8004970 <__smakebuf_r>
 80048d0:	89a0      	ldrh	r0, [r4, #12]
 80048d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048d6:	f010 0301 	ands.w	r3, r0, #1
 80048da:	d00a      	beq.n	80048f2 <__swsetup_r+0x9e>
 80048dc:	2300      	movs	r3, #0
 80048de:	60a3      	str	r3, [r4, #8]
 80048e0:	6963      	ldr	r3, [r4, #20]
 80048e2:	425b      	negs	r3, r3
 80048e4:	61a3      	str	r3, [r4, #24]
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	b943      	cbnz	r3, 80048fc <__swsetup_r+0xa8>
 80048ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048ee:	d1c4      	bne.n	800487a <__swsetup_r+0x26>
 80048f0:	bd38      	pop	{r3, r4, r5, pc}
 80048f2:	0781      	lsls	r1, r0, #30
 80048f4:	bf58      	it	pl
 80048f6:	6963      	ldrpl	r3, [r4, #20]
 80048f8:	60a3      	str	r3, [r4, #8]
 80048fa:	e7f4      	b.n	80048e6 <__swsetup_r+0x92>
 80048fc:	2000      	movs	r0, #0
 80048fe:	e7f7      	b.n	80048f0 <__swsetup_r+0x9c>
 8004900:	20000064 	.word	0x20000064

08004904 <_sbrk_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d06      	ldr	r5, [pc, #24]	; (8004920 <_sbrk_r+0x1c>)
 8004908:	2300      	movs	r3, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f7fc fcaa 	bl	8001268 <_sbrk>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_sbrk_r+0x1a>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_sbrk_r+0x1a>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	20000264 	.word	0x20000264

08004924 <__swhatbuf_r>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	460c      	mov	r4, r1
 8004928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492c:	2900      	cmp	r1, #0
 800492e:	b096      	sub	sp, #88	; 0x58
 8004930:	4615      	mov	r5, r2
 8004932:	461e      	mov	r6, r3
 8004934:	da0d      	bge.n	8004952 <__swhatbuf_r+0x2e>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f013 0f80 	tst.w	r3, #128	; 0x80
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	bf0c      	ite	eq
 8004942:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004946:	2340      	movne	r3, #64	; 0x40
 8004948:	2000      	movs	r0, #0
 800494a:	6031      	str	r1, [r6, #0]
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	b016      	add	sp, #88	; 0x58
 8004950:	bd70      	pop	{r4, r5, r6, pc}
 8004952:	466a      	mov	r2, sp
 8004954:	f000 f848 	bl	80049e8 <_fstat_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	dbec      	blt.n	8004936 <__swhatbuf_r+0x12>
 800495c:	9901      	ldr	r1, [sp, #4]
 800495e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004962:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004966:	4259      	negs	r1, r3
 8004968:	4159      	adcs	r1, r3
 800496a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496e:	e7eb      	b.n	8004948 <__swhatbuf_r+0x24>

08004970 <__smakebuf_r>:
 8004970:	898b      	ldrh	r3, [r1, #12]
 8004972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004974:	079d      	lsls	r5, r3, #30
 8004976:	4606      	mov	r6, r0
 8004978:	460c      	mov	r4, r1
 800497a:	d507      	bpl.n	800498c <__smakebuf_r+0x1c>
 800497c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2301      	movs	r3, #1
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	b002      	add	sp, #8
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	ab01      	add	r3, sp, #4
 800498e:	466a      	mov	r2, sp
 8004990:	f7ff ffc8 	bl	8004924 <__swhatbuf_r>
 8004994:	9900      	ldr	r1, [sp, #0]
 8004996:	4605      	mov	r5, r0
 8004998:	4630      	mov	r0, r6
 800499a:	f7ff fb0f 	bl	8003fbc <_malloc_r>
 800499e:	b948      	cbnz	r0, 80049b4 <__smakebuf_r+0x44>
 80049a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a4:	059a      	lsls	r2, r3, #22
 80049a6:	d4ef      	bmi.n	8004988 <__smakebuf_r+0x18>
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	e7e3      	b.n	800497c <__smakebuf_r+0xc>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	6020      	str	r0, [r4, #0]
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	6163      	str	r3, [r4, #20]
 80049c2:	9b01      	ldr	r3, [sp, #4]
 80049c4:	6120      	str	r0, [r4, #16]
 80049c6:	b15b      	cbz	r3, 80049e0 <__smakebuf_r+0x70>
 80049c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 f81d 	bl	8004a0c <_isatty_r>
 80049d2:	b128      	cbz	r0, 80049e0 <__smakebuf_r+0x70>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	431d      	orrs	r5, r3
 80049e4:	81a5      	strh	r5, [r4, #12]
 80049e6:	e7cf      	b.n	8004988 <__smakebuf_r+0x18>

080049e8 <_fstat_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d07      	ldr	r5, [pc, #28]	; (8004a08 <_fstat_r+0x20>)
 80049ec:	2300      	movs	r3, #0
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	f7fc fc0e 	bl	8001216 <_fstat>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d102      	bne.n	8004a04 <_fstat_r+0x1c>
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	b103      	cbz	r3, 8004a04 <_fstat_r+0x1c>
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	20000264 	.word	0x20000264

08004a0c <_isatty_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	; (8004a28 <_isatty_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc fc0d 	bl	8001236 <_isatty>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_isatty_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_isatty_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000264 	.word	0x20000264

08004a2c <_init>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

08004a38 <_fini>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr
